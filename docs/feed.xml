<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://mariochavez.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mariochavez.io/" rel="alternate" type="text/html" /><updated>2020-05-19T21:04:23-05:00</updated><id>https://mariochavez.io/feed.xml</id><title type="html">Mario Alberto Chávez : Blog</title><subtitle>Blog personal de Mario Alberto Chávez. Temas de desarrollo de software y fotografia.</subtitle><entry><title type="html">Rails, Webpack y desarrollo frontend con Javascript</title><link href="https://mariochavez.io/desarrollo/2020/05/19/rails-webpack-desarrollo-frontend.html" rel="alternate" type="text/html" title="Rails, Webpack y desarrollo frontend con Javascript" /><published>2020-05-19T02:00:00-05:00</published><updated>2020-05-19T02:00:00-05:00</updated><id>https://mariochavez.io/desarrollo/2020/05/19/rails-webpack-desarrollo-frontend</id><content type="html" xml:base="https://mariochavez.io/desarrollo/2020/05/19/rails-webpack-desarrollo-frontend.html">&lt;h1 id=&quot;rails-webpack-y-desarrollo-frontend-con-javascript&quot;&gt;Rails, Webpack y desarrollo frontend con Javascript&lt;/h1&gt;

&lt;p&gt;El 19 de Mayo tuve una sesión de “streaming” para platicar sobre el desarrollo de frontend con Javascript en Rails. El video y los recurso están listados en este post.&lt;/p&gt;

&lt;p&gt;El video ya está disponible para quienes no tuvieron la oportunidad de acompañarme.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;iframe width=&quot;862&quot; height=&quot;485&quot; src=&quot;https://www.youtube.com/embed/maFimVOh3b4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Para la siguiente sesión hay que estar pendientes de mi cuenta de Twitter &lt;a href=&quot;https://twitter.com/mario_chavez&quot; target=&quot;_blank&quot;&gt;@mario_chavez&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;recursos-de-plática&quot;&gt;Recursos de plática&lt;/h2&gt;
&lt;p&gt;En el 2011 DHH anuncio que Javascript y compañía serian ciudadanos de primera clase en las aplicaciones de Rails. Oficialmente le daba la bienvenida a CoffeeScript, SCSS y JQuery. En su momento fue el paso correcto ya que el desarrollo de Frontend requería de un dinamismo que todos en el mundo de Rails estaban haciendo pero no había una guía exacta de cómo hacerle.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mariochavez.io/desarrollo/2020/05/19/from-the-asset-pipeline-to-webpack.html&quot; target=&quot;_blank&quot;&gt;From the Asset Pipeline to Webpack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El Asset Pipeline vino a ser esa guía hasta que ya no lo fue más. React, Angular, Vue y otros vinieron a cambiar el panorama del desarrollo de Frontend, el Frontend ya no era HTML o por lo menos no era como lo conocíamos.&lt;/p&gt;

&lt;p&gt;Y aunque se hicieron ajustes al Asset Pipeline para adaptarse a los nuevos requisitos, simplemente no fue suficiente. Hacer que una aplicación de React se compilara mediante el Asset Pipeline ya no era algo trivial.&lt;/p&gt;

&lt;p&gt;Seis años más tarde en mismo DHH anunciaba que Webpack tendría integración con Rails y un año más tarde que Webpack era el default para toda nueva aplicación de Rails. Este cambio hacía más sencillo la integración de nuevas tecnologías en el Frontend con Rails.&lt;/p&gt;

&lt;p&gt;Sin embargo la geografía de las aplicaciones había cambiado desde antes de esos anuncios. El Frontend era una aplicación independiente, compilada y distribuida aparte del Backend. El Backend ya no era una sólo aplicación, posiblemente eran varias, eran microservicios.&lt;/p&gt;

&lt;p&gt;Esto representó otro problema técnico, asegurar que los cambios de Frontend y Backend se realizaran de forma paralela. El hacer QA se complicaba ya que ahora era necesario levantar al menos dos aplicaciones, el Frontend y el Backend. Hacer pruebas automáticas de integración ni pensarlo. La complejidad del desarrollo de las aplicaciones también se lleva su parte.&lt;/p&gt;

&lt;p&gt;Independientemente de cual sea nuestro sentir, al menos Rails no se interpone en el camino de querer remplazar el Frontend con alguna tecnología con Javascript. Y aunque algunos de los comentarios de separar el Frontend a su propio repositorio van en el sentido de dividir el desarrollo a final de cuentas depende de alguna manera del Backend. Otro de los comentarios es la distribución de los assets, la cuál se puede hacer sin ningún problema con un servicio como &lt;a href=&quot;https://www.cloudflare.com/&quot; target=&quot;_blank&quot;&gt;Cloudflare&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La gente de Evil Martians tiene tres posts de cómo trabajar de forma moderna con Javascript y Rails.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://evilmartians.com/chronicles/evil-front-part-1&quot; target=&quot;_blank&quot;&gt;Evil Front Part 1: Modern Front-end in Rails - Martian Chronicles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si la intención es hacer una SPA o Single Page Application con el Backend de Rails, gracias a Webpacker, Rails no va a ser un obstáculo al respecto, inclusive cuenta con algunos generadores que nos van ayudar en la tarea de hacer el “boilerplate” de la aplicación.&lt;/p&gt;

&lt;p&gt;En el modelo de Omakase de Rails el empuje sigue en una dirección contraria a las SPA. Es por eso que  que StimulsJS fue liberado hace un par de años.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stimulusjs.org/&quot; target=&quot;_blank&quot;&gt;A modest JavaScript framework for the HTML you already have.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;StimulusJS es una librería de Javascript que puede hacer data-binding a elementos en el DOM así como reaccionar a eventos. Lo importante de StimulusJS es que no se apropia del HTML y DOM si no que trabaja con él. Esto quiere decir que Rails aún tiene que servir sus vistas en HTML. Es mi librería de defacto para proyectos dónde no sea realmente necesario React o Angular. - A final de cuentas no soy ni Facebook ni Google -.&lt;/p&gt;

&lt;p&gt;Funciona sin problemas con Turbolinks, el cuál ha mejorado increíblemente desde las primeras versiones y en realidad entre ambos hacen que las páginas respondan casi de forma instantánea con muy poco código.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/turbolinks/turbolinks&quot; target=&quot;_blank&quot;&gt;turbolinks/turbolinks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tal es el caso que la gente de The Changelog lo utiliza aún cuando su aplicación no es Rails.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://changelog.com/posts/why-we-chose-turbolinks&quot; target=&quot;_blank&quot;&gt;Why we chose Turbolinks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HoneyBadger tiene unos muy buenos concejos para usar Turbolink sin dispararse en el pie.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.honeybadger.io/blog/turbolinks/&quot; target=&quot;_blank&quot;&gt;How We Migrated To Turbolinks Without Breaking Javascript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Entre Turbolinks y StimulusJS realmente vale a la pena detener un momento y preguntarnos si realmente necesitamos una SPA.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@jmanrubia/escaping-the-spa-rabbit-hole-with-turbolinks-903f942bf52c&quot; target=&quot;_blank&quot;&gt;Escaping the SPA rabbit hole with modern Rails&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para quienes quieran explorar StimulusJS les comparto una lista de ejemplo de cosas básicas para ser utilizado.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://onrails.blog/stimulus-js-tutorials/&quot; target=&quot;_blank&quot;&gt;Stimulus.js Tutorials * Blogging On Rails&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La adopción de StimulusJS ya comienza a cuestionarnos sobre patrones y mejores formas de adopción, definitivamente el crear componentes compuestos hasta este momento es lo que mejor me ha funcionado.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.to/adrienpoly/introducing-stimulus-use-composable-behaviors-for-your-controllers-mlc&quot; target=&quot;_blank&quot;&gt;Introducing Stimulus-use composable behaviors for your controllers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La gente de Basecamp está trabajando en su propio cliente de correo electrónico llamado Hey. Es posible que el 5 de Junio lo abran en nivel beta. Esta hecho con Rails, Turbolinks y StimulusJS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hey.com/&quot; target=&quot;_blank&quot;&gt;HEY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DHH anunció que va a revisar de forma pública los cambios, mejoras y patrones que emplearon para el desarrollo del cliente, el cuál aparentemente no tiene muchas dependencias de Javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/_swanson/status/1253037966710181892&quot; target=&quot;_blank&quot;&gt;https://twitter.com/_swanson/status/1253037966710181892&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stimulus está en evolución. Hace unas semanas vi un video de demostración de Stimulus-Reflex y CableReady. Dos herramientas que aprovechan ActionCable para hacer aplicaciones reactivas mediante sockets sin escribir una sola línea de Javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/mario_chavez/status/1256263180722081792&quot; target=&quot;_blank&quot;&gt;https://twitter.com/mario_chavez/status/1256263180722081792&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fue simplemente un deleite ver como funcionaba.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.stimulusreflex.com/&quot; target=&quot;_blank&quot;&gt;Stimulux Reflex&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cableready.stimulusreflex.com/&quot; target=&quot;_blank&quot;&gt;Cable Ready&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creo que hay mucho camino aún por recorrer en mundo de Rails para hacer aplicaciones que sean rápidas y fáciles de desarrollar, que de gusto trabajar en ellas en pocas palabras. Pero tenemos que ser consientes que Rails es aburrido, ya no es ese espejito brillante.&lt;/p&gt;

&lt;p&gt;Facebook hace unos días cambió su interfase gráfica, es “diferente”. El equipo técnico de Facebook escribió un post explicando como movieron todo a React y Relay y dividieron los assets en pequeños bundles con la finalidad de que fuera más rápida. Veredicto … es más lenta.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://engineering.fb.com/web/facebook-redesign/&quot; target=&quot;_blank&quot;&gt;Rebuilding our tech stack for a new Facebook.com - Facebook Engineering&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finalmente sobre los comentarios que hice sobre microservicios anteriormente les dejo el siguiente tweet de un ingeniero de Uber para que ustedes mismos se creen su propio criterio.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/GergelyOrosz/status/1247132806041546754&quot; target=&quot;_blank&quot;&gt;https://twitter.com/GergelyOrosz/status/1247132806041546754&lt;/a&gt;&lt;/p&gt;</content><author><name>Mario Alberto Chávez</name></author><summary type="html">Rails, Webpack y desarrollo frontend con Javascript</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mariochavez.io/frontend.jpg" /><media:content medium="image" url="https://mariochavez.io/frontend.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">From the Asset Pipeline to Webpack</title><link href="https://mariochavez.io/desarrollo/2020/05/19/from-the-asset-pipeline-to-webpack.html" rel="alternate" type="text/html" title="From the Asset Pipeline to Webpack" /><published>2020-05-19T01:00:00-05:00</published><updated>2020-05-19T01:00:00-05:00</updated><id>https://mariochavez.io/desarrollo/2020/05/19/from-the-asset-pipeline-to-webpack</id><content type="html" xml:base="https://mariochavez.io/desarrollo/2020/05/19/from-the-asset-pipeline-to-webpack.html">&lt;h1 id=&quot;from-the-asset-pipeline-to-webpack&quot;&gt;From the Asset Pipeline to Webpack&lt;/h1&gt;

&lt;p&gt;In May 2011, DHH announced at Railsconf a new framework for Rails, The Asset Pipeline. It was also announced that SCSS and CoffeeScript, along with jQuery, were to become a default on every Rails application.&lt;/p&gt;

&lt;p&gt;The recognition that Web Development changed since Rails was created, and that it was the time for Rails to promote to first-class citizen every aspect of building Web UIs.&lt;/p&gt;

&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/dhh-tweet.png&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;API Blueprint&quot; srcset=&quot;/assets/img/dhh-tweet.png 1200w, /assets/img/300-dhh-tweet.png 300w, /assets/img/768-dhh-tweet.png 768w, /assets/img/1024-dhh-tweet.png 1024w, /assets/img/180-dhh-tweet.png 180w, /assets/img/940-dhh-tweet.png 940w, /assets/img/320-dhh-tweet.png 320w, /assets/img/640-dhh-tweet.png 640w, /assets/img/960-dhh-tweet.png 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;It was a step forward, but people complained about SCSS and CoffeeScript becoming the default on every project. The plan was in place, and on August 31st, 2011 &lt;a href=&quot;http://guides.rubyonrails.org/3_1_release_notes.html&quot; target=&quot;_blank&quot;&gt;version 3.1 was released&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the Rails world, the frontend development was done with HTML/CSS and jQuery plugins, but the UI complexity and Javascript spaghetti code needed a different solution, this how frontend libraries started to arise, being one of the first &lt;a href=&quot;http://backbonejs.org&quot; target=&quot;_blank&quot;&gt;Backbone.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Managing, invalidating, and serving assets was a difficult task, and &lt;a href=&quot;http://guides.rubyonrails.org/asset_pipeline.html&quot; target=&quot;_blank&quot;&gt;the Asset Pipeline&lt;/a&gt; came with the promise to make it easy. Front-end development continued moving forward; eventually, Backbone.js died, and jQuery was not enough anymore.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;Node.js&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com&quot;&gt;NPM&lt;/a&gt;, and ECMA 5 stepped in and rapidly influenced how to do frontend development. Single-page applications became a thing, and this had a direct effect in the Rails world where it was no longer easy just to download a Javascript file, put it in the vendor folder, and expect it to work.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rails/sprockets&quot; target=&quot;_blank&quot;&gt;Sprockets&lt;/a&gt;, the heart of the Asset Pipeline, tried to keep up, but somehow, it fell short. I saw different solutions that included Gulp, Grunt, and Bower as a way to keep doing modern Web frontend development, and there was no joy on any of it.&lt;/p&gt;

&lt;p&gt;Finally, to address this situation, on April 27th, 2017 &lt;a href=&quot;https://sipsandbits.com/2017/03/09/whats-new-in-rails-51/&quot; target=&quot;_blank&quot;&gt;Rails 5.1&lt;/a&gt; was released, it included Yarn to manage Javascript dependencies and support for &lt;a href=&quot;https://webpack.js.org&quot;&gt;Webpack&lt;/a&gt; with sensitive defaults and integration on Rails itself via &lt;a href=&quot;https://github.com/rails/webpacker&quot;&gt;Webpacker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rails provide a tool that is familiar to frontend developers and eases the adoption of new Javascript libraries. Still, compatibility needs to be kept for projects that use the Asset Pipeline, so it was not removed. You can use Webpacker and the Asset Pipeline seamlessly. It may take a few more versions before the Asset Pipeline becomes deprecated.&lt;/p&gt;

&lt;h2 id=&quot;starting-with-webpack&quot;&gt;Starting with Webpack.&lt;/h2&gt;
&lt;p&gt;If you are creating a new Rails application starting with Webpack is easy.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails new sample_app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For a new Rails project on version 6.0, Webpack is set up by default. If you need a Javascript library like React, Angular, Elm, Vuejs, or Stimulusjs, you can specify it with an option.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails new sample_app --webpack=react
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to disable the Asset Pipeline, add the following flag to the new command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails new sample_app --skip-sprockets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Be aware that the &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets&lt;/code&gt; folder is created even when this flag is set, so you might need to remove it manually.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/assets
├── config
├── images
└── stylesheets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rails configure Webpack to work seamlessly with the development, test, and production environment. The Webpacker gem is responsible for this integration. If you need to tweak or change Webpack’s configuration, configuration files can be found at the &lt;code class=&quot;highlighter-rouge&quot;&gt;/config&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config/webpacker.yml
config/webpack
├── development.js
├── environment.js
├── production.js
└── test.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All frontend assets are organized around packs. A pack is a bundle for all required assets, like public application assets or the administration assets. A pack is an entry point that declares all the assets for each pack; a pack can share assets between them. Pack definitions live inside &lt;code class=&quot;highlighter-rouge&quot;&gt;/app/javascript/packs&lt;/code&gt; folder. The default pack is application.js.&lt;/p&gt;

&lt;p&gt;Now you can create a folder for images, stylesheets, or any other asset that needs to be served with Webpack.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/javascript
├── controllers
├── images
├── packs
└── stylesheets
    └── modules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Just be sure to require the assets in their corresponding packs, or Webpack will not load them.&lt;/p&gt;

&lt;p&gt;Also, you need to ensure that all your views layouts are using Webpacker helpers to load the packs.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;%= javascript_pack_tag &quot;application&quot; %&amp;gt;
&amp;lt;%= stylesheet_pack_tag &quot;application&quot; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running the Rails server, in development mode, and visiting a page start a Webpack process to compile the required packs delaying the response from the server. Compiling assets this way is simple but slow.&lt;/p&gt;

&lt;p&gt;A faster approach is running a separate Webpack process; just run the Webpack development server.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/webpack-dev-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A benefit of having a separate process for Webpack is that it makes compilation fast, and also it auto-reload the current page if changes on assets are detected. A simple solution to start the Rails and Webpack servers on their separate process is to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Procfile&lt;/code&gt; and use a tool like &lt;a href=&quot;https://github.com/DarthSim/overmind&quot; target=&quot;_blank&quot;&gt;Overmind&lt;/a&gt; to start them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server: bin/rails server
assets: bin/webpack-dev-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ overmind start
server | Started with pid 9681...
assets | Started with pid 9682...
warning package.json: No license field
assets | ℹ ｢wds｣: Project is running at http://localhost:3036/
assets | ℹ ｢wds｣: webpack output is served from /packs/
assets | ℹ ｢wds｣: Content not from webpack is served from /../public/packs
assets | ℹ ｢wds｣: 404s will fallback to /index.html
server | =&amp;gt; Booting Puma
server | =&amp;gt; Rails 6.0.2.2 application starting in development
server | =&amp;gt; Run `rails server --help` for more startup options
server | Puma starting in single mode...
server | * Version 4.3.3 (ruby 2.6.5-p114), codename: Mysterious Traveller
server | * Min threads: 5, max threads: 5
server | * Environment: development
server | * Listening on tcp://127.0.0.1:3036
server | * Listening on tcp://[::1]:3036
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;moving-from-the-asset-pipeline-to-webpack&quot;&gt;Moving from the Asset Pipeline to Webpack&lt;/h2&gt;
&lt;p&gt;Everything described in the previous section applies to new Rails applications, but what about an existing application? If your application is not a Rails 6.0 o better, you might need to install Webpack manually.&lt;/p&gt;

&lt;p&gt;Before continuing, I want to make it clear that if your Javascript does not follow the &lt;a href=&quot;https://nodejs.org/api/modules.html&quot; target=&quot;_blank&quot;&gt;Node.js Modules&lt;/a&gt; &lt;a href=&quot;https://darrenderidder.github.io/talks/ModulePatterns/#/&quot;&gt;pattern&lt;/a&gt; you need to figure out how to change your code to make it Webpack friendly.&lt;/p&gt;

&lt;p&gt;Rails applications older than version 6.0 might not have Webpack integration installed; to install it first, add the Webpacker gem to your Gemfile and run Bundler. Now generate Webpack configuration files by running the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rails g webpacker:install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you need to add support for a frontend Javascript library like Rect or Stimulus, run the Webpacker generator.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rails g webpacker:install:react
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rails g webpacker:install:stimulus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt; pack is modified to include everything you need to start working with the installed Javascript library.&lt;/p&gt;

&lt;p&gt;With Webpack in place, you can start moving your assets from the Asset Pipeline folders to the new &lt;code class=&quot;highlighter-rouge&quot;&gt;app/javascript&lt;/code&gt; folder. Let us start with images. Move your images to &lt;code class=&quot;highlighter-rouge&quot;&gt;app/javascript/images&lt;/code&gt; in there. You can organize the images into sub-folders, for example, images for the public frontend and images for the private backend or just leave all of them there.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt; file, you can import images one by one as follow.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import '../images/image1.png';
import '../images/image2.png';
...
import '../images/imageN.png';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or you can take advantage of Webpacker’s &lt;code class=&quot;highlighter-rouge&quot;&gt;require.context&lt;/code&gt; and import all of them at once.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require.context('../images', true);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second param tells Webpacker to scan subdirectories inside &lt;code class=&quot;highlighter-rouge&quot;&gt;app/javascript/images&lt;/code&gt;. You can also be more selective and pass the third parameter as a regular expression to import just the matched images. To use an image in a Rails view, you need to make use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;asset_pack_tag&lt;/code&gt; helper.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;%= image_pack_tag(&quot;image1.png&quot;) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But if you need the image URL, then use the &lt;code class=&quot;highlighter-rouge&quot;&gt;asset_pack_url&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;%= asset_pack_tag(&quot;image1.png&quot;) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you need to reference an image from a stylesheet file, then use the &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; function with the relative path to the image.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;background-image: url(&quot;../images/image1.png&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Moving the Stylesheets is not different than moving the images into Webpacker. Just move the files into &lt;code class=&quot;highlighter-rouge&quot;&gt;app/javascript/stylesheets&lt;/code&gt;. You need to require all your stylesheet files one by one or all at once using &lt;code class=&quot;highlighter-rouge&quot;&gt;require.context&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require(&quot;../stylesheets/application.css&quot;);
require(&quot;../stylesheets/module/navbar.css&quot;);

// Or all at once
require.context('../stylesheets', true);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you are using SASS, it is best to require the entry file and then within SASS import your stylesheets.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require(&quot;../stylesheets/application.scss&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then in your &lt;code class=&quot;highlighter-rouge&quot;&gt;application.scss&lt;/code&gt; import your stylesheets as you normally do.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import 'layout.css';
...
import 'buttons.css';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From your SASS file, you can import Stylesheets from installed Javascript libraries and take advantage of SASS variables or functions they provide.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@import '~bulma/bulma';
...
@import &quot;~notyf/notyf.min&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Just remember to use Yarn to install any dependency that is managed by Webpack. For example, to install &lt;a href=&quot;https://bulma.io/&quot; target=&quot;_blank&quot;&gt;Bulma&lt;/a&gt; CSS library, run the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn add bulma
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Moving your Javascript files could be a little more complicated, it depends on their complexity, but the approach is the same. Move all files to &lt;code class=&quot;highlighter-rouge&quot;&gt;app/javascript/scripts&lt;/code&gt;, and with Yarn, add all the libraries your code depends.&lt;/p&gt;

&lt;p&gt;Here is an example of adding Javascript dependencies to a project.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/yarn add  jquery turbolinks @rails/ujs @rails/activestorage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each library has different requirements on how they need to be imported and started because of this always read their README file to ensure you are using them correctly.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Rails from 'rails-ujs';
import Turbolinks from 'turbolinks';
import * as ActiveStorage from 'activestorage';

Rails.start()
Turbolinks.start()
ActiveStorage.start()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In most cases, jQuery needs to be available globally and accessible with &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery&lt;/code&gt;. To accomplish this, open the &lt;code class=&quot;highlighter-rouge&quot;&gt;config/webpack/environment.js&lt;/code&gt; file and add the following lines just above &lt;code class=&quot;highlighter-rouge&quot;&gt;module.exports = environment&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const webpack = require('webpack');
environment.plugins.append('Provide', new webpack.ProvidePlugin({
  $: 'jquery',
  jQuery: 'jquery'
}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you find that your Javascript code fails to be compiled by Webpacker due to a missing variable, you may need to add additional &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; on top of the file that fails to compile.&lt;/p&gt;

&lt;p&gt;At this point, Webpack should compile your assets successfully; if that is the case, then you are ready to remove the Asset Pipeline if not the additional debug is required.&lt;/p&gt;

&lt;p&gt;To disable the Asset Pipeline in your application, remove references to &lt;code class=&quot;highlighter-rouge&quot;&gt;config.assets&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;config/environments/production.rb&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;config/environments/development.rb&lt;/code&gt;. Also, remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;config/initializer/assets.rb&lt;/code&gt; file and finally remove coffee-rails, sass-rails, and uglifier gems from your Gemfile.&lt;/p&gt;

&lt;p&gt;The file &lt;code class=&quot;highlighter-rouge&quot;&gt;config/application.rb&lt;/code&gt; needs a change to not require all Rails frameworks, remove this line &lt;code class=&quot;highlighter-rouge&quot;&gt;require &quot;rails/all&quot;&lt;/code&gt;, and expand the frameworks list where &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;sprockets/railtie&quot;&lt;/code&gt; is commented.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require &quot;rails&quot;
# Pick the frameworks you want:
require &quot;active_model/railtie&quot;
require &quot;active_job/railtie&quot;
require &quot;active_record/railtie&quot;
require &quot;active_storage/engine&quot;
require &quot;action_controller/railtie&quot;
require &quot;action_mailer/railtie&quot;
require &quot;action_view/railtie&quot;
# require &quot;action_cable/engine&quot;
# require &quot;sprockets/railtie&quot;
require &quot;rails/test_unit/railtie&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As the last step, remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets&lt;/code&gt; folder. Now your application uses Webpack to manage your application assets.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you are reading this, it means that your application is running with Webpack, congratulations! Your team now has modern tools to work on your frontend.&lt;/p&gt;</content><author><name>Mario Alberto Chávez</name></author><summary type="html">From the Asset Pipeline to Webpack</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mariochavez.io/webpack-post.jpg" /><media:content medium="image" url="https://mariochavez.io/webpack-post.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">APIs con Ruby</title><link href="https://mariochavez.io/desarrollo/2020/05/14/apis-con-ruby.html" rel="alternate" type="text/html" title="APIs con Ruby" /><published>2020-05-14T01:00:00-05:00</published><updated>2020-05-14T01:00:00-05:00</updated><id>https://mariochavez.io/desarrollo/2020/05/14/apis-con-ruby</id><content type="html" xml:base="https://mariochavez.io/desarrollo/2020/05/14/apis-con-ruby.html">&lt;h1 id=&quot;apis-con-ruby&quot;&gt;APIs con Ruby&lt;/h1&gt;

&lt;p&gt;El pasado 13 de mayo tuve una sesión de “streaming” para platicar sobre el desarrollo de APIs REST con Ruby. La plática
se dividió en varias secciones dónde se tocaron temas de qué herramientas hay para construir APIs con Ruby, los diferentes
estándares para construir APIs, herramientas para documentar, recursos para entender mejor qué es un API y cómo funciona,
entre otros temas.&lt;/p&gt;

&lt;p&gt;El video ya está disponible para quienes no tuvieron la oportunidad de acompañarme.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ZRvcg3MSC0Y&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Para la siguiente sesión hay que estar pendientes de mi cuenta de Twitter &lt;a href=&quot;https://twitter.com/mario_chavez&quot; target=&quot;_blank&quot;&gt;@mario_chavez&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;recursos-de-plática&quot;&gt;Recursos de plática&lt;/h2&gt;

&lt;p&gt;Para construir APIs con Ruby existen diversas opciones desde Ruby muy básico hasta frameworks completos como Rails.&lt;/p&gt;

&lt;h4 id=&quot;rack-api&quot;&gt;Rack API&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/fnando/rack-api&quot; target=&quot;_blank&quot;&gt;fnando/rack-api&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;grape&quot;&gt;Grape&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ruby-grape/grape&quot; target=&quot;_blank&quot;&gt;ruby-grape/grape&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;hanami&quot;&gt;Hanami&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://hanamirb.org&quot; target=&quot;_blank&quot;&gt;Hanami&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;rails-api&quot;&gt;Rails API&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://guides.rubyonrails.org/api_app.html&quot; target=&quot;_blank&quot;&gt;Using Rails for API-only Applications - Ruby on Rails Guides&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;referencias-generales-sobre-apis&quot;&gt;Referencias generales sobre APIs&lt;/h3&gt;

&lt;p&gt;Antes de aventurarnos a escribir un API realmente tenemos que entender de qué se trata un API y cuál es su relación con estándar HTTP.&lt;/p&gt;

&lt;h4 id=&quot;build-apis-you-wont-hate&quot;&gt;Build APIs you won’t hate&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://apisyouwonthate.com/books/build-apis-you-wont-hate&quot; target=&quot;_blank&quot;&gt;Build APIs You Won’t Hate&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;el-estándar-de-open-api&quot;&gt;El estándar de Open API&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.openapis.org&quot; target=&quot;_blank&quot;&gt;Home - OpenAPI Initiative&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;json-api&quot;&gt;JSON API&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://jsonapi.org&quot; target=&quot;_blank&quot;&gt;JSON:API&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-ion-hypermedia-type&quot;&gt;The ION Hypermedia type&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://ionspec.org&quot; target=&quot;_blank&quot;&gt;The Ion Hypermedia Type&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;hal---hypertext-application-language&quot;&gt;HAL - Hypertext application language&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://stateless.co/hal_specification.html&quot; target=&quot;_blank&quot;&gt;The Hypertext Application Language&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;editores&quot;&gt;Editores&lt;/h3&gt;

&lt;p&gt;Escribir las especificaciones de un API puede ser una tarea complicada sin ayuda para asegurarnos que la estamos 
escribiendo de acuerdo al estándar que deseamos adoptar.&lt;/p&gt;

&lt;h4 id=&quot;stoplight-studio&quot;&gt;Stoplight Studio&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://stoplight.io/studio/&quot; target=&quot;_blank&quot;&gt;Stoplight Studio | OpenAPI Design, Planning &amp;amp; Modeling Tool&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;swagger&quot;&gt;Swagger&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://swagger.io/&quot; target=&quot;_blank&quot;&gt;API Documentation &amp;amp; Design Tools for Teams | Swagger | Swagger&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;api-blueprint&quot;&gt;API Blueprint&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://apiblueprint.org/&quot; target=&quot;_blank&quot;&gt;API Blueprint | API Blueprint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mariochavez.io/desarrollo/2018/08/02/keep-your-api-in-shape-with-api-blueprint.html&quot; target=&quot;_blank&quot;&gt;Keep your API in shape with API Blueprint&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;lecciones-a-seguir&quot;&gt;Lecciones a seguir&lt;/h3&gt;

&lt;p&gt;Todos los recursos disponibles ayudan a tener un mejor panorama al momento de crear un API pero no ayudan en lo 
específico a decidir cómo hacer el API. El siguiente post registra algunas experiencias basadas en el desarrollo de un
API que sea estándar y documentando.&lt;/p&gt;

&lt;h4 id=&quot;lecciones-construyendo-un-api&quot;&gt;Lecciones construyendo un API&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://mariochavez.io/desarrollo/2019/12/30/lecciones-construyendo-un-api-rest.html&quot; target=&quot;_blank&quot;&gt;Lecciones construyendo un API REST&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;implementación-en-ruby&quot;&gt;Implementación en Ruby&lt;/h3&gt;

&lt;p&gt;Ya conocimos algunas opciones sobre las cuales escribir nuestros APIs ahora toca el tema a herramientas específicas
que nos ayudan a seguir un camino estable y documentado al implementar un API.&lt;/p&gt;

&lt;h4 id=&quot;serializadores-modernos&quot;&gt;Serializadores modernos&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://vasilakisfil.social/blog/2020/01/20/modern-ruby-serializers/&quot; target=&quot;_blank&quot;&gt;Modern Ruby Serializers&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;jsonapi-rb&quot;&gt;JSONAPI-RB&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jsonapi-rb/jsonapi-rb&quot; target=&quot;_blank&quot;&gt;jsonapi-rb/jsonapi-rb&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;committee&quot;&gt;Committee&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/interagent/committee&quot; target=&quot;_blank&quot;&gt;interagent/committee&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;writing-a-hypermedia-api-client-with-ruby&quot;&gt;Writing a Hypermedia API client with Ruby&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://thoughtbot.com/blog/writing-a-hypermedia-api-client-in-ruby&quot; target=&quot;_blank&quot;&gt;Writing a Hypermedia API client in Ruby&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;faster-json-generation-with-postgresql&quot;&gt;Faster JSON generation with PostgreSQL&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://hashrocket.com/blog/posts/faster-json-generation-with-postgresql&quot; target=&quot;_blank&quot;&gt;Faster JSON Generation with PostgreSQL&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;conditional-get-with-rails&quot;&gt;Conditional GET with Rails&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://api.rubyonrails.org/classes/ActionController/ConditionalGet.html&quot; target=&quot;_blank&quot;&gt;ActionController::ConditionalGet&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;autentificación&quot;&gt;Autentificación&lt;/h3&gt;

&lt;p&gt;Toda API requiere de algún mecanismo de autentificación. Dependiendo del uso de API vamos a tener dos opciones diferentes.&lt;/p&gt;

&lt;h4 id=&quot;token-authentication-with-rails&quot;&gt;Token Authentication with Rails&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://thoughtbot.com/blog/token-authentication-with-rails&quot; target=&quot;_blank&quot;&gt;Token Authentication with Rails&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;json-web-token&quot;&gt;JSON Web Token&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jwt/ruby-jwt&quot; target=&quot;_blank&quot;&gt;jwt/ruby-jwt&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;el-elefante-blanco-en-el-stream&quot;&gt;El elefante blanco en el stream&lt;/h3&gt;

&lt;p&gt;Todo el material mostrado hasta este punto habla específicamente desde el punto de vistas de APIs REST y de la idea de
Phil Sturgeon de que realmente no conocemos REST aunque alguno de nostros juremos que hemos implementado APIs REST.
Es por eso que existe GraphQL, el cuál es una serie de “hacks” para crear APIs “más flexibles” a costa de ignorar el 
estándar HTTP.&lt;/p&gt;

&lt;h3 id=&quot;graphql&quot;&gt;GraphQL&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://graphql-ruby.org/&quot; target=&quot;_blank&quot;&gt;GraphQL - Welcome&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusiones&quot;&gt;Conclusiones&lt;/h3&gt;
&lt;p&gt;Para poder lograr un API exitosa y de la cuál no nos arrepintamos más adelante es necesario conocer qué es REST a fondo,
basarnos en elguno de los estándares disponibles y sobre todo que sea un API totalmente documentada. Todos los recursos
aquí mostrados ayudan a tener una idea más clara pero siempre es importante buscar inspiración en lo que otros hacen.&lt;/p&gt;

&lt;p&gt;Busca en los servicios que consumes en tus aplicaciones cómo está documentada el API de los mismos, qué cosas son las que
te agradan de esa implementación y qué las que te desagradan, trata de seguir los pasos de esas APIs que te inspiran.&lt;/p&gt;

&lt;h4 id=&quot;stripe-api&quot;&gt;Stripe API&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://stripe.com/docs/api&quot; target=&quot;_blank&quot;&gt;Stripe API&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;creditario-api&quot;&gt;Creditario API&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.creditar.io/&quot; target=&quot;_blank&quot;&gt;Creditario API&lt;/a&gt;&lt;/p&gt;</content><author><name>Mario Alberto Chávez</name></author><summary type="html">APIs con Ruby</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mariochavez.io/apis-con-ruby.jpg" /><media:content medium="image" url="https://mariochavez.io/apis-con-ruby.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Actividades de fotografía en f/64</title><link href="https://mariochavez.io/fotograf%C3%ADa/2020/04/09/actividades-f64.html" rel="alternate" type="text/html" title="Actividades de fotografía en f/64" /><published>2020-04-09T13:00:00-05:00</published><updated>2020-04-09T13:00:00-05:00</updated><id>https://mariochavez.io/fotograf%C3%ADa/2020/04/09/actividades-f64</id><content type="html" xml:base="https://mariochavez.io/fotograf%C3%ADa/2020/04/09/actividades-f64.html">&lt;p&gt;El día de hoy puse en operación el sition &lt;a href=&quot;https://actividades.f64.io&quot; target=&quot;_blank&quot;&gt;https://actividades.f64.io&lt;/a&gt; como una herramienta complementaria a las pláticas presenciales que se organizan cada mes con fotógrafas y fotógrafos locales en Colima.&lt;/p&gt;

&lt;p&gt;La idea con estás actividades es continuar con la promoción y desarrollo de la creatividad fotográfica a através de actividades alrededor de temas específicos y acotados.&lt;/p&gt;

&lt;p&gt;Pueden participar cualquier persona ya sea con la cámara de su celular o con una cámara profesional. Cada actividad tiene un periodo de tiempo y un límite de fotografías para recibir por participante.&lt;/p&gt;

&lt;p&gt;Las fotografías de cada actividad se hacen públicas automáticamente al final del periodo de recepción de participaciones, esto con la finalidad de que cada participante pueda libremente poner en práctica su creatividad.&lt;/p&gt;

&lt;div class=&quot;blog-media&quot;&gt;
    &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/f64-page2.png&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Actividades f/64&quot; srcset=&quot;/assets/img/f64-page2.png 1200w, /assets/img/300-f64-page2.png 300w, /assets/img/768-f64-page2.png 768w, /assets/img/1024-f64-page2.png 1024w, /assets/img/180-f64-page2.png 180w, /assets/img/940-f64-page2.png 940w, /assets/img/320-f64-page2.png 320w, /assets/img/640-f64-page2.png 640w, /assets/img/960-f64-page2.png 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
  &lt;/div&gt;

&lt;p&gt;La primera actividad ya se encuentra disponible y se llama &lt;a href=&quot;https://actividades.f64.io/actividades/nuestro-espacio-en-cuarentena&quot; target=&quot;_blank&quot;&gt;Nuestro espacio en cuarentena”&lt;/a&gt;. Es un ensayo que busca conocer cómo es que cada participante está viviendo la cuarentena desde su espacio personal.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Debido a la situación de contingencia sanitaria que estamos viviendo nos hemos apartado de las actividades diarias de nuestras vidas y nos enfrentamos a una situación un tanto desconocida para muchos de nosotros.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;El estar en aislamiento para algunos puede afectar su creatividad en la creación de imagenes para otros sin embargo puede ser una oportunidad para explorar en nuestros espacios cosas y situaciones que damos por sentado que siempre están o son así.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;blog-media&quot;&gt;
    &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/f64-page3.png&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Actividades f/64&quot; srcset=&quot;/assets/img/f64-page3.png 1200w, /assets/img/300-f64-page3.png 300w, /assets/img/768-f64-page3.png 768w, /assets/img/1024-f64-page3.png 1024w, /assets/img/180-f64-page3.png 180w, /assets/img/940-f64-page3.png 940w, /assets/img/320-f64-page3.png 320w, /assets/img/640-f64-page3.png 640w, /assets/img/960-f64-page3.png 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
  &lt;/div&gt;

&lt;p&gt;La actividad está abierta del 8 de abril, 2020 al 22 de abril, 2020. Para participar sólo es necesario registrarse y comenzar a subir el material fotográfico relacionado al tema.&lt;/p&gt;</content><author><name>Mario Alberto Chávez</name></author><summary type="html">El día de hoy puse en operación el sition https://actividades.f64.io como una herramienta complementaria a las pláticas presenciales que se organizan cada mes con fotógrafas y fotógrafos locales en Colima.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mariochavez.io/f64-page1.png" /><media:content medium="image" url="https://mariochavez.io/f64-page1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Foto libro Los Chayacates de Ixtlahuacán</title><link href="https://mariochavez.io/fotograf%C3%ADa/2020/02/11/foto-libro-los-chayacates.html" rel="alternate" type="text/html" title="Foto libro Los Chayacates de Ixtlahuacán" /><published>2020-02-11T12:00:00-06:00</published><updated>2020-02-11T12:00:00-06:00</updated><id>https://mariochavez.io/fotograf%C3%ADa/2020/02/11/foto-libro-los-chayacates</id><content type="html" xml:base="https://mariochavez.io/fotograf%C3%ADa/2020/02/11/foto-libro-los-chayacates.html">&lt;p&gt;Cuando comencé en la fotografía lo hice sin mucho sentido o sin pensar a detalle, fue realmente más una necesidad de tomar “snapshots” de los lugares que visitaba sin ninguna pretensión ni verlo como trabajo fotográfico.&lt;/p&gt;

&lt;p&gt;Sin embargo, con el pasar del tiempo la fotografía ha tomado un sentido diferente, se ha vuelto una actividad importante para la cual me preparo y salgo específicamente con la idea de lograr un trabajo específico.&lt;/p&gt;

&lt;p&gt;A través de este tiempo he logrado coleccionar un “cuerpo de trabajo”, es algo que se ha ido generando de manera orgánica y hoy en día en ese “cuerpo de trabajo” me es posible reconocer patrones que al momento de poner ese material en conjunto puede contar una historia.&lt;/p&gt;

&lt;p&gt;No soy de los que publican material en redes sociales, sé que no hago fotos para los likes. En gran medida porque no me gustaría que mis fotos se pierdan en un mar de imágenes digital y qué pasen a través de la pantalla de un celular de forma efímera directo al olvido.&lt;/p&gt;

&lt;p&gt;Es por esta razón que parte de este material sólo toma vida en forma de impresión digital o química y un poco de él en forma digital a través de &lt;a href=&quot;https://heroimage.co&quot; target=&quot;_blank&quot;&gt;https://heroimage.co&lt;/a&gt;. Y es precisamente buscando formatos para poder mostrar parte de este trabajo que nace la intención de crear foto libros.&lt;/p&gt;

&lt;p&gt;Todo inició con un taller en el Foto Museo Cuatro Caminos sobre maquetación de foto libros dónde se dio forma al foto libro “Los Chayacates de Ixtlahuacán”, una fiesta popular del estado de Colima. Dado que en ese momento ya contaba con material suficiente para mostrar la fiesta en imágenes decidí que fueran el primer foto libro.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/IMG_6269.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Maqueta de fotolibro&quot; srcset=&quot;/assets/img/IMG_6269.jpg 1200w, /assets/img/300-IMG_6269.jpg 300w, /assets/img/768-IMG_6269.jpg 768w, /assets/img/1024-IMG_6269.jpg 1024w, /assets/img/180-IMG_6269.jpg 180w, /assets/img/940-IMG_6269.jpg 940w, /assets/img/320-IMG_6269.jpg 320w, /assets/img/640-IMG_6269.jpg 640w, /assets/img/960-IMG_6269.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Con la ayuda de Santiago Escobar-Jaramillo, quien impartió el curso, se realizó una selección y organización de las imágenes a formar parte de la maqueta inicial, cuya intención es visualizar la historia a contar.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/IMG_6268.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Maqueta de fotolibro&quot; srcset=&quot;/assets/img/IMG_6268.jpg 1200w, /assets/img/300-IMG_6268.jpg 300w, /assets/img/768-IMG_6268.jpg 768w, /assets/img/1024-IMG_6268.jpg 1024w, /assets/img/180-IMG_6268.jpg 180w, /assets/img/940-IMG_6268.jpg 940w, /assets/img/320-IMG_6268.jpg 320w, /assets/img/640-IMG_6268.jpg 640w, /assets/img/960-IMG_6268.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Posteriormente se produjeron dos archivos digitales, el primero de visualización, dónde se siguió refinando la idea la foto libro y posteriormente el archivo de impresión. De alguna forma la elaboración de este libro es un trabajo con una idea muy personal y hasta cierto punto también artesanal.&lt;/p&gt;

&lt;p&gt;Cada foto libro se arma de manera totalmente manual, las hojas impresas se organizan, se doblan se forman pliegos que después se cosen a mano con aguja e hilo para finalmente ser empastados. No hay máquinas fuera de la impresora para crear cada foto libro.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/IMG_6271.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Hojas impresas&quot; srcset=&quot;/assets/img/IMG_6271.jpg 1200w, /assets/img/300-IMG_6271.jpg 300w, /assets/img/768-IMG_6271.jpg 768w, /assets/img/1024-IMG_6271.jpg 1024w, /assets/img/180-IMG_6271.jpg 180w, /assets/img/940-IMG_6271.jpg 940w, /assets/img/320-IMG_6271.jpg 320w, /assets/img/640-IMG_6271.jpg 640w, /assets/img/960-IMG_6271.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Si lees este post y te interesa tener una copia de foto libro “Los Chayacates de Ixtlahuacán” mándame un correo a &lt;a href=&quot;mailto:mario@heroimage.co?subject=Fotolibro%20Los%20Chayacates&quot;&gt;mario@heroimage.co&lt;/a&gt;, el costo por cada foto libro es de $250 pesos más gastos de envío y solamente se ensamblaran 50 copias del foto libro.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/IMG_6270.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;El libro&quot; srcset=&quot;/assets/img/IMG_6270.jpg 1200w, /assets/img/300-IMG_6270.jpg 300w, /assets/img/768-IMG_6270.jpg 768w, /assets/img/1024-IMG_6270.jpg 1024w, /assets/img/180-IMG_6270.jpg 180w, /assets/img/940-IMG_6270.jpg 940w, /assets/img/320-IMG_6270.jpg 320w, /assets/img/640-IMG_6270.jpg 640w, /assets/img/960-IMG_6270.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;El libro tiene como dimensiones 21cm de alto por 14.5 de ancho y un peso de 100grms. Cuenta con 27 imágenes de las fiestas de Los Chayacates de Ixtlahuacán Colima así como una introducción explicando la misma. El libro está impreso a color en papel couché de 130grms y la pasta es de opalina 200grms plastificada.&lt;/p&gt;</content><author><name>Mario Alberto Chávez</name></author><summary type="html">Cuando comencé en la fotografía lo hice sin mucho sentido o sin pensar a detalle, fue realmente más una necesidad de tomar “snapshots” de los lugares que visitaba sin ninguna pretensión ni verlo como trabajo fotográfico.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mariochavez.io/foto-libro-chayacates-1.png" /><media:content medium="image" url="https://mariochavez.io/foto-libro-chayacates-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Lecciones construyendo un API REST</title><link href="https://mariochavez.io/desarrollo/2019/12/30/lecciones-construyendo-un-api-rest.html" rel="alternate" type="text/html" title="Lecciones construyendo un API REST" /><published>2019-12-30T12:00:00-06:00</published><updated>2019-12-30T12:00:00-06:00</updated><id>https://mariochavez.io/desarrollo/2019/12/30/lecciones-construyendo-un-api-rest</id><content type="html" xml:base="https://mariochavez.io/desarrollo/2019/12/30/lecciones-construyendo-un-api-rest.html">&lt;h1 id=&quot;lecciones-construyendo-un-api-rest&quot;&gt;Lecciones construyendo un API REST&lt;/h1&gt;

&lt;p&gt;Durante el 2019 un equipo de ingeniería de &lt;a href=&quot;http://micheda.io&quot; target=&quot;_blank&quot;&gt;micheda.io&lt;/a&gt; estuvo enfocado en el desarrollo de un producto interno que lleva por nombre &lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt; es un motor bancario que cuenta con la siguiente funcionalidad.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Manejo de solicitudes de crédito&lt;/li&gt;
  &lt;li&gt;Expedientes de clientes&lt;/li&gt;
  &lt;li&gt;Flujo de pre-calificación de solicitudes&lt;/li&gt;
  &lt;li&gt;Administración de créditos&lt;/li&gt;
  &lt;li&gt;Gestión de pagos&lt;/li&gt;
  &lt;li&gt;Manejo de portafolio de préstamos&lt;/li&gt;
  &lt;li&gt;Gestión de campañas de Crowdfunding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Desde su concepción, &lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt; estuvo diseñado para ser una plataforma a través de la cual empresas FinTech pudieran configurar sus flujos y procesos libremente y olvidarse de desarrollar su propio motor bancario y enfocarse en la parte importante de su negocio.&lt;/p&gt;

&lt;p&gt;Debido a esto, tomamos varias decisiones técnicas que nos llevarán a que &lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt; fuese una plataforma sobre la cual construir otras aplicaciones o servicios. Algunas de las decisiones fueron las siguientes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Una instancia privada de aplicación y base de datos por cada cliente; además de datos sensibles cifrados a nivel de base de datos.&lt;/li&gt;
  &lt;li&gt;Flexibilidad desde la UI de &lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt; para poder configurar diferentes productos crediticios en diferentes escenarios.&lt;/li&gt;
  &lt;li&gt;Notificar a través de WebHooks de diferentes acciones manuales y automáticas en la plataforma.&lt;/li&gt;
  &lt;li&gt;Flexibilidad para que la FinTech defina su flujo de recolección de información del cliente y aplique sus propias validaciones de información.&lt;/li&gt;
  &lt;li&gt;Toda la operación de &lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt; se expone a través de un API REST 100% documentada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como equipo de diseño y desarrollo hemos tratado de poner nuestra experiencia junto con la asesoría - y desilusión de sus plataformas actuales - que recibimos sobre la operación de empresas FinTech amigas.&lt;/p&gt;

&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/creditario-1.png&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Creditar.io&quot; srcset=&quot;/assets/img/creditario-1.png 1200w, /assets/img/300-creditario-1.png 300w, /assets/img/768-creditario-1.png 768w, /assets/img/1024-creditario-1.png 1024w, /assets/img/180-creditario-1.png 180w, /assets/img/940-creditario-1.png 940w, /assets/img/320-creditario-1.png 320w, /assets/img/640-creditario-1.png 640w, /assets/img/960-creditario-1.png 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;El API era una parte crucial en cómo podíamos ayudar a otras empresas a no pensar en &lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt; y que se pudieran enfocar en la parte relevante de sus servicios. Es por eso que me voy a enfocar el resto de este post en las lecciones y decisiones que tomamos al construir el API.&lt;/p&gt;

&lt;h2 id=&quot;api-rest&quot;&gt;API REST&lt;/h2&gt;

&lt;p&gt;Cuando comenzábamos a tomar decisiones de cómo debería ser el API. Se tomó en consideración el que fuera un GraphQL API pero fue un poco complicado el darle sentido de esta forma. Si bien GraphQL ofrece una serie de mejoras en cómo comunicarse entre servicios vía Internet, para nuestro caso en particular no se observaba una ventaja real el seguir por este camino.&lt;/p&gt;

&lt;p&gt;Así que la decisión recayó en un API REST. Primeramente el API REST sigue los estándares de HTTP los cuales son estables y documentados desde la versión 1 en 1990, después en 1997 con la versión 1.1 y finalmente en el 2015 con la versión 2.&lt;/p&gt;

&lt;p&gt;HTTP/2 trae consigo mejoras que, aunque lentamente, se han ido integrando en Web Servers y herramientas de desarrollo. Estos son algunos de los beneficios.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compresión de los &lt;strong&gt;Headers&lt;/strong&gt;: Los metadatos enviados en una solicitud o respuesta pueden llegar a ser más grandes en tamaño que el contenido del mensaje en algunos casos.&lt;/li&gt;
  &lt;li&gt;Comunicación dos vía o &lt;strong&gt;Multiplexación&lt;/strong&gt;: Con una sola conexión es posible mandar varias solicitudes y obtener varias respuestas, evitando el tener que cerrar y abrir una conexión por cada recurso realizando cada ocasión un &lt;strong&gt;Handshake&lt;/strong&gt; que es costoso. Inclusive el servidor puede decir hacer un &lt;strong&gt;“Push”&lt;/strong&gt; de recursos no solicitados pero que serán útiles más adelante.&lt;/li&gt;
  &lt;li&gt;Contenido &lt;strong&gt;binario&lt;/strong&gt;: El contenido del cuerpo del mensaje va en formato binario, una vez más, reduciendo el tamaño los mensajes enviados entre el cliente y servidor.&lt;/li&gt;
  &lt;li&gt;Cifrado de conexión: Si bien HTTP/2 no requiere comunicación vía TLS, es una tendencia que va de la mano para soportar HTTP/2 en los Servidores Web y los clientes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si bien el estándar no está totalmente implementado en todas por todas las partes involucradas, hoy en día y casi sin mayor esfuerzo es posible obtener sus beneficios, por ejemplo, utilizando servicios como Cloudflare o bien poniendo la aplicación detrás de NGNIX con el soporte para HTTP/2 activo.&lt;/p&gt;

&lt;p&gt;En el caso de los clientes para consumir el API, dependiendo del lenguaje desde dónde se consuma hay opciones para obtener algunos de los beneficios de HTTP/2, por ejemplo en Ruby el cliente &lt;a href=&quot;https://gitlab.com/honeyryderchuck/httpx&quot; target=&quot;_blank&quot;&gt;HTTPX&lt;/a&gt; permite hoy en día algunos de esos beneficios.&lt;/p&gt;

&lt;p&gt;Tomando en cuenta lo antes mencionado y la experiencia previa trabajando en la implementación de APIs para diferentes tipos de aplicaciones la realidad es que difícil construir un API REST bien diseñada y que no terminemos odiando más adelante en el camino. Es todavía más difícil cuando quien la construye o la consume no conoce del estándar HTTP.&lt;/p&gt;

&lt;h2 id=&quot;básicos-de-http&quot;&gt;Básicos de HTTP&lt;/h2&gt;

&lt;p&gt;A final de cuentas trabajar en un API REST no es otra cosa entender que un servidor puede recibir una solicitud y debe de proporcionar una respuesta; ya sea en una conexión única o multiplexada.&lt;/p&gt;

&lt;p&gt;Así se ve una solicitud.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /clients?page=1 HTTP/1.1
Host: creditar.io
Authorization: Bearer hdue373nd393mk38304k
Accept: application/json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;La respuesta para la solicitud anterior es algo parecido a lo siguiente.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-cache, private
Location: https://creditar.io/clients?page=1
Connection: close

{ &quot;data&quot;: { &quot;id&quot;:: 636264b1-dc0d-453e-8804-4ac451e1dbd5 ... }, 
          { &quot;id&quot;: 636264b1-dc0d-453e-8804-4ac451e1dce8 ... } ... 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lo que vemos en ambos casos es el protocolo de HTTP en acción.&lt;/p&gt;

&lt;h2 id=&quot;rest&quot;&gt;REST&lt;/h2&gt;

&lt;p&gt;Algo que muchos damos por sentado es que entendemos que es REST y aunque el concepto es relativamente simple lo que entendemos no es necesariamente lo correcto.&lt;/p&gt;

&lt;p&gt;En términos prácticos REST significa &lt;strong&gt;“Representational State Transfer”&lt;/strong&gt;. La idea se basa en como representar un estado - el estado de un recurso o recursos - para su transferencia. REST es estilo de arquitectura de software. centrado en los recursos disponibles por el servidor.&lt;/p&gt;

&lt;h3 id=&quot;recurso&quot;&gt;Recurso&lt;/h3&gt;

&lt;p&gt;Un recurso es una abstracción de información, un recurso o una colección de recursos es todo lo que podemos nombrar en un sistema y a diferencia de la creencia general puede o no tener conexión directa con un modelo de datos. Por ejemplo, un cliente puede representar a un objeto que mapea a un registro a en una base de datos o bien puede representar la combinación de datos dentro de un sistema pero que hacia el exterior es mostrado como una unidad. Los recursos en un API REST están vinculados a una URL.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/clients/636264b1-dc0d-453e-8804-4ac451e1dbd5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A través de las URLs del recurso, es como en un API REST nos es posible llevar a cabo acciones que impliquen obtener más información o bien cambiar el estado del mismo.&lt;/p&gt;

&lt;h3 id=&quot;representación&quot;&gt;Representación&lt;/h3&gt;

&lt;p&gt;La representación de un recurso consiste en datos y quizás metadata. No hay un estándar de cómo representar el recurso. La representación puede ser en simple texto, en XML o JSON; siendo está última la representación defacto en casi toda API actual.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accept: application/json # Enviado por el cliente

Content-Type: application/json # Respuesta del servidor

# Representación del recurso
{ &quot;data&quot;: { &quot;id&quot;:: 636264b1-dc0d-453e-8804-4ac451e1dbd5 ... }, 
          { &quot;id&quot;: 636264b1-dc0d-453e-8804-4ac451e1dce8 ... } ... 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Para el caso de representación en formato JSON en contar un esquema JSON puede ser de gran ayuda tanto para quién desarrolla el API como para quién la consume. Sobre este punto vamos a hablar un poco más adelante.&lt;/p&gt;

&lt;h3 id=&quot;rest-aprovecha-el-http&quot;&gt;REST aprovecha el HTTP&lt;/h3&gt;

&lt;p&gt;Como vemos, hay una relación intrínseca entre REST y HTTP. Los conceptos de arquitectura de REST están basados en los fundamentos del protocolo de HTTP.&lt;/p&gt;

&lt;h2 id=&quot;cómo-tratar-de-escribir-un-buen-api-rest&quot;&gt;Cómo tratar de escribir un buen API REST?&lt;/h2&gt;

&lt;p&gt;Ahora que homologamos un poco el conocimiento de qué es un API REST continuemos con algunos conceptos que nos ayudaran en el desarrollo de nuestra API.&lt;/p&gt;

&lt;h3 id=&quot;usar-uuid-para-los-recursos&quot;&gt;Usar UUID para los recursos&lt;/h3&gt;

&lt;p&gt;Es común en los frameworks de desarrollo que los registros en la base de datos utilicen números enteros como llave primaria. Estos números se calculan al crear el registro y tienen la particularidad de ser números consecutivos.&lt;/p&gt;

&lt;p&gt;Alguien con un poco de tiempo libre puede aprovechar esta situación tratar de adivinar los identificadores de los recursos y tratar de aprovechar posibles “hoyos” de seguridad para realizar operaciones con ellos.&lt;/p&gt;

&lt;p&gt;Es por eso que la recomendación en este caso es utilizar &lt;strong&gt;“Global Unique Identifiers”&lt;/strong&gt; o &lt;strong&gt;UUID&lt;/strong&gt;, ya que estos son una cadena de texto - en realidad son varios bloques de números aleatorios en hexadecimal - indescifrable normalmente generada a partir de un generador de números aleatorios seguro.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;636264b1-dc0d-453e-8804-4ac451e1dbd5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Si por ejemplo en tu actual aplicación utilizas números enteros como identificador para tus recursos, no es necesario rehacer toda esa parte de la aplicación, únicamente con agregar un campo de tipo &lt;strong&gt;UUID&lt;/strong&gt; y exponer este identificador a través del API es suficiente.&lt;/p&gt;

&lt;h3 id=&quot;acciones-rest&quot;&gt;Acciones REST&lt;/h3&gt;

&lt;p&gt;Es importante identificar los recursos que vamos a exponer a través de nuestro API. Como se mencionó anteriormente, los recursos expuestos por el API no necesariamente tiene una relación directa con el modelo de datos de nuestra aplicación.&lt;/p&gt;

&lt;p&gt;Los recursos pueden tener 5 acciones básicas: &lt;strong&gt;Crear&lt;/strong&gt;, &lt;strong&gt;Leer&lt;/strong&gt;, &lt;strong&gt;Actualizar&lt;/strong&gt;, &lt;strong&gt;Eliminar&lt;/strong&gt; y &lt;strong&gt;Listar&lt;/strong&gt;. Estas deben de estar organizadas alrededor del nombre del recursos, que normalmente se escribe en plural, y deben de hacer uso correcto de los Verbos de HTTP y los Estatus de respuesta.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Clients
- Create   POST   /clients                                         201
- Read     GET    /clients/636264b1-dc0d-453e-8804-4ac451e1dce8    200
- Update   PATCH  /clients/636264b1-dc0d-453e-8804-4ac451e1dce8    204
- Delete   DELETE /clients/636264b1-dc0d-453e-8804-4ac451e1dce8    204
- List     GET    /clients                                         200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Si existe alguna acción no-estándar a las antes mencionadas quizás vale la pena considerarla como un recurso adicional. Por ejemplo, supongamos que necesitamos en el API las acciones para bloquear o desbloquear un cliente. Una de las forma en como he visto que se implementan este tipo de acciones es la siguiente.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT /block_client/636264b1-dc0d-453e-8804-4ac451e1dce8       204
PUT /unblock_client/636264b1-dc0d-453e-8804-4ac451e1dce8     204
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No es muy REST, pero funciona. El problema con este tipo de implementaciones es que es muy sencillo que se salgan de control y terminemos con nuestro API lleno de acciones no REST. Otro problema que he visto es que ambas acciones para bloquear y desbloquear terminan en el código de nuestro framework en un sólo método con condicionales para ejecutar un bloqueo o un desbloqueo.&lt;/p&gt;

&lt;p&gt;Si es realmente necesario implementar acciones como estas en el API entonces la mejor forma de implementarlo sería la siguiente.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST    /clients/636264b1-dc0d-453e-8804-4ac451e1dce8/block     201
DELETE  /clientes/636264b1-dc0d-453e-8804-4ac451e1dce8/unblock  204
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sobre todo, asegurando en la implementación que cada acción quede en su propio bloque de código sin condicionales para determinar que acción realizar.&lt;/p&gt;

&lt;p&gt;Viendo los ejemplo anteriores podemos notar que la organización de los recursos en el API no sólo implica el cómo se define la URL del recurso ya que esta organización va acompañada de la utilización adecuada de los verbos de HTTP y de los estatus de respuesta.&lt;/p&gt;

&lt;p&gt;No hay nada más frustrante en un API que todas las llamadas se hagan con un &lt;strong&gt;GET&lt;/strong&gt; o un &lt;strong&gt;POST&lt;/strong&gt; y que todos los estatus de respuesta sean un &lt;strong&gt;200&lt;/strong&gt; sin importar que acción se realizó o si ocurrió algún error.&lt;/p&gt;

&lt;h3 id=&quot;jerarquía-de-recursos&quot;&gt;Jerarquía de recursos&lt;/h3&gt;

&lt;p&gt;Otro punto importante a considerar cuando diseñamos un API es la jerarquía de recursos. Si consideramos que un cliente puede tener créditos y que un crédito puede tener referencias empezamos a ver una jerarquía de recursos.&lt;/p&gt;

&lt;p&gt;La forma más común en como normalmente se resuelve esta situación es la siguiente.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Lee los créditos de un cliente
GET /clients/636264b1-dc0d-453e-8804-4ac451e1dce8/credits

# Crea un nuevo crédito al cliente
POST /clients/636264b1-dc0d-453e-8804-4ac451e1dce8/credits

# Lee las referencias del crédito 2 del cliente 1
GET /clients/636264b1-dc0d-453e-8804-4ac451e1dce8/credits/92545809-e0e7-43df-b53e-8a7bc5eeb364/references
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Si deseamos pedir una referencia en particular la URL se vuelve todavía más grande y se empieza a complicar. Técnicamente hacer esta implementación es relativamente simple; racionarla quizás no sea tan sencillo.&lt;/p&gt;

&lt;p&gt;La solución más sencilla en este caso es limitar el anidar recursos a máximo un segundo nivel, en el peor de los casos. Lo ideal y lo que hicimos en &lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt; fue mantener una jerarquía plana para los recursos.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Lee los créditos de un cliente
GET /credits/?cliente_id=636264b1-dc0d-453e-8804-4ac451e1dce8

# { cliente_id: 636264b1-dc0d-453e-8804-4ac451e1dce8, ... } en el cuerpo de la solicitud indicamos el cliente
POST /credits 

# Lee las referencias de un crédito
GET /references/?credit_id=172fcb04-52a5-4f5b-8bd0-2655b89d53d3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Es más sencillo el razonar el API con esta jerarquía plana; la intención de las acciones son más fáciles de vislumbrar.&lt;/p&gt;

&lt;h3 id=&quot;demasiadas-vueltas-al-servidor&quot;&gt;Demasiadas vueltas al servidor&lt;/h3&gt;

&lt;p&gt;Una de las quejas más comunes que he escuchado de las API REST es que hay que hacer más de una solicitud a varios recursos para traer toda la información que posiblemente requiere el cliente que la está consumiendo. Desafortunadamente cada solicitud crear su propia conexión al servidor lo que a la larga hace que la respuesta final tarde tiempo.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Solicita un cliente
GET /clients/636264b1-dc0d-453e-8804-4ac451e1dce8

# Solicita los créditos del cliente
GET /credits/client_id=636264b1-dc0d-453e-8804-4ac451e1dce8

# Solicita los pagos del de los créditos
GET /payments/credit_id=93570b12-42dc-4850-a535-16fb7aa5d0cd
GET /payments/credit_id=8e8c5921-2892-445f-9f40-e27159d27e4a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Este problema realmente se debe a un diseño irrealista de cómo se va a utilizar el API y a un mal entendimiento de REST.
No hay nada que impida a un recurso el “traer” información de otros recursos relacionados en la misma llamada, reduciendo de esta forma la cantidad de solicitudes al API.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /clients/636264b1-dc0d-453e-8804-4ac451e1dbd5?include=credits
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Simple. Y si además queremos los pagos?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /clients/636264b1-dc0d-453e-8804-4ac451e1dbd5?include=credits,payments
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O si en lugar de querer obtener más información necesitamos realizar la misma acción a más de un recurso, por ejemplo, eliminar varios pagos.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DELETE /payments/6313ac69-dc0d-45a8-8804-4ac451e1db5c,0b19e3b6-9fae-40e1-a7c2-f2db1cae8a5a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En el peor de los casos dónde si ocupemos varias llamadas consecutivas entonces podemos utilizar del lado del cliente una librería como &lt;strong&gt;HTTPX&lt;/strong&gt; que como se mencionó anteriormente, permite realizar varias llamadas en la misma conexión por periodos cortos, evitando el costoso &lt;strong&gt;Handshake&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Con la adopción de HTTP/2 va a ser natural tener conexiones dónde podamos mandar más de una solicitud a la vez al servidor.&lt;/p&gt;

&lt;h3 id=&quot;representación-de-recursos&quot;&gt;Representación de recursos&lt;/h3&gt;

&lt;p&gt;Ya mencionamos que la representación de recursos de un API consiste de datos y metadatos pero además esa respuesta tiene que ser consistente a través de todos los recursos. Esta consistencia ayuda en la creación y simplificación de clientes que consuman el API.&lt;/p&gt;

&lt;p&gt;En &lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt; la representación de un sólo elemento de tipo cliente se ve así.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /clients/636264b1-dc0d-453e-8804-4ac451e1dbd5

{ &quot;data&quot;: [
    { &quot;id&quot;: &quot;636264b1-dc0d-453e-8804-4ac451e1dbd5&quot;, ... }
  ],
  &quot;links&quot;: [
    { &quot;rel&quot;: &quot;self&quot;, &quot;uri&quot;: &quot;/clients/636264b1-dc0d-453e-8804-4ac451e1dbd5&quot; }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Como podemos apreciar la respuesta contiene datos y metadatos. Primeramente &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; contiene un arreglo con la representación de todos los recursos solicitados, en este caso un sólo elemento.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;links&lt;/code&gt; contiene información de acciones que podemos realizar sobre los recursos que obtuvimos, además del &lt;code class=&quot;highlighter-rouge&quot;&gt;uri&lt;/code&gt; de dónde se realizó la acción. En este caso las &lt;code class=&quot;highlighter-rouge&quot;&gt;uri&lt;/code&gt; ayudan a los clientes a no tener que calcularlas para acciones que desee realizar el cliente y además tenemos la confianza de que el &lt;code class=&quot;highlighter-rouge&quot;&gt;uri&lt;/code&gt; es correcto y válido.&lt;/p&gt;

&lt;p&gt;Si la solicitud fuera para más de un recurso, entonces la representación se vería así.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /clients

{ &quot;data&quot;: [
    { &quot;id&quot;: &quot;636264b1-dc0d-453e-8804-4ac451e1dbd5&quot;, ... },
    { &quot;id&quot;: &quot;0b19e3b6-9fae-40e1-a7c2-f2db1cae8a5a&quot;, ... }
  ],
  &quot;pagination&quot;: {
    &quot;cursors&quot;: {
      &quot;after&quot;: &quot;0b19e3b6-9fae-40e1-a7c2-f2db1cae8a5a&quot;,
      &quot;next_uri&quot;: &quot;/products?cursor=0b19e3b6-9fae-40e1-a7c2-f2db1cae8a5a&quot;
    }
  },
  &quot;links&quot;: [
    { &quot;rel&quot;: &quot;self&quot;, &quot;uri&quot;: &quot;/clients&quot; }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No cambia mucho respecto a la representación anterior. &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; tiene un elemento más y en los metadatos tenemos la sección de &lt;code class=&quot;highlighter-rouge&quot;&gt;pagination&lt;/code&gt; que contiene información para el cliente pueda hacer solicitudes paginadas al recurso.&lt;/p&gt;

&lt;p&gt;Como podemos observar, ambas representaciones son bastante parecidas sin importar que estemos solicitando un elemento o varios de nuestro recurso.&lt;/p&gt;

&lt;h3 id=&quot;representación-de-errores&quot;&gt;Representación de errores&lt;/h3&gt;

&lt;p&gt;Hay ocasiones que al solicitar a través del API una acción a un recurso como respuesta obtengamos un error de aplicación. Es importante que el estatus de respuesta sea un error de la serie 4xx, por ejemplo 401 o 422 y no un status de respuesta 200.&lt;/p&gt;

&lt;p&gt;Además el status correcto en el cuerpo de la respuesta listar todos los posibles errores en la petición en donde puede venir un tipo de error, un código único del error, un mensaje para el usuario y un link dónde exista más información para el desarrollador que está consumiendo el API.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;errors&quot;: [
    {
      &quot;type&quot;: &quot;not_found&quot;,
      &quot;code&quot;: &quot;ERR-404&quot;,
      &quot;message&quot;: &quot;El recurso solicitado 636264b1-dc0d-453e-8804-4ac451e1dbd5 no existe&quot;,
      &quot;href&quot;: &quot;staging.creditar.io/api/documentation#err-404&quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Es importante que el usuario o el desarrollador pueda obtener toda la información necesaria para solucionar su problema durante el uso de nuestra API.&lt;/p&gt;

&lt;h3 id=&quot;compresión-de-respuestas&quot;&gt;Compresión de respuestas&lt;/h3&gt;

&lt;p&gt;El tamaño de la respuesta puede llegar a ser de algunos Kilobytes o más cuando incluye representación de recursos relativamente grandes o bien incluye varios recursos anidados, es posible reducir el tamaño en bytes comprimiendo la respuesta.&lt;/p&gt;

&lt;p&gt;Por ejemplo en Rails, podemos utilizar el &lt;strong&gt;Middleware&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Rack::Deflater&lt;/code&gt; el cuál soporta el modo de compresión &lt;strong&gt;Gzip&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Desde el cliente se envía el &lt;strong&gt;Header&lt;/strong&gt; de HTTP &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Encoding:&quot;gzip&quot;&lt;/code&gt; para indicar que el cliente quiere una respuesta comprimida.&lt;/p&gt;

&lt;p&gt;Con el proxy &lt;a href=&quot;https://docs.nginx.com/nginx/admin-guide/web-server/compression/&quot; target=&quot;_blank&quot;&gt;NGNIX&lt;/a&gt; es posible configurarlo para que en caso de que nuestro framework no soporte compresión y así delegar esta tarea al proxy.&lt;/p&gt;

&lt;p&gt;Ya mencionamos anteriormente que HTTP/2 se comunica con un protocolo binario lo cuál ayudará a reducir el tamaño de las respuestas una vez que su uso sea más común.&lt;/p&gt;

&lt;h3 id=&quot;negociación-de-contenido&quot;&gt;Negociación de contenido&lt;/h3&gt;

&lt;p&gt;Es importante que un API sea explícita en los formatos en que recibe la datos y envía, para esto en HTTP contamos con dos &lt;strong&gt;Headers&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Accept&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Accept&lt;/code&gt; es enviado por el cliente para indicar cuáles son los formatos de datos en que puede recibir respuestas, por ejemplo &lt;code class=&quot;highlighter-rouge&quot;&gt;Accept: application/json&lt;/code&gt;. Este encabezado le indica al API que esperamos como respuesta un &lt;strong&gt;json&lt;/strong&gt;. Si el servidor no puede darnos la respuesta  en el formato solicitado entonces nos enviará un estatus &lt;strong&gt;406 Not Acceptable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Si el API puede darnos la respuesta en el formato esperado entonces en la respuesta enviará el encabezado &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type: application/json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En el caso de acciones como &lt;strong&gt;POST&lt;/strong&gt; o &lt;strong&gt;PATCH&lt;/strong&gt; en dónde el cliente envía información al API, es importante que el cliente además de enviar el encabezado &lt;code class=&quot;highlighter-rouge&quot;&gt;Accept&lt;/code&gt; también envié el encabezado &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; para informarle al API cómo debe de interpretar la información que recibe.&lt;/p&gt;

&lt;h3 id=&quot;versionado-del-api&quot;&gt;Versionado del API&lt;/h3&gt;

&lt;p&gt;Este es un tema crítico en el desarrollo de API REST. Existen varias opiniones de cómo versionar el API.&lt;/p&gt;

&lt;p&gt;Hay quienes dicen que lo mejor es que la versión sea parte de la &lt;strong&gt;URI&lt;/strong&gt; del recurso.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /v1/clients
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;El problema más grande con esto es que si hay una versión 2 entonces hay que ir a cambiar todas las posibles &lt;strong&gt;URIs&lt;/strong&gt; “hardcodeadas” en el cliente. Pero aún si hay un proceso de transición entre 2 versiones del API y se desea utilizar recursos en ambas versiones.&lt;/p&gt;

&lt;p&gt;Otra de las opciones es indicar con un parámetro la versión del API.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /clients?version=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Un poco de lo mismo con la solución anterior.&lt;/p&gt;

&lt;p&gt;En en caso de &lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt; se decidió hacer uso de la negociación de contenido, por lo tanto es posible recibir el encabezado &lt;code class=&quot;highlighter-rouge&quot;&gt;Accept: application/vnd.creditar.v1+json&lt;/code&gt; para indicar que esperamos un &lt;strong&gt;json&lt;/strong&gt; como respuesta pero además indicar la versión del API que deseamos que responda a nuestra solicitud.&lt;/p&gt;

&lt;p&gt;Con esta solución desde el framework para el API podemos hacer que automáticamente otra ruta de código se ejecute cuando se indica la versión 2 del API, sin tener que agregar condicionales o cosas complicadas en el código para mantener las dos versiones activas durante la transición. O bien, si el API versión 2 se ejecuta en otra plataforma diferente desde el proxy es posible inspeccionar el encabezado y dirigir el tráfico a otra aplicación que puede estar escrita en el mismo lenguaje de programación o una diferente.&lt;/p&gt;

&lt;h3 id=&quot;hateoas&quot;&gt;HATEOAS&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HATEOAS&lt;/strong&gt; o &lt;strong&gt;Hypermedia as the Engine of Application State&lt;/strong&gt;, es una evolución sobre la arquitectura de REST.&lt;/p&gt;

&lt;p&gt;Básicamente tiene dos principios: negociación de contenido y controles &lt;strong&gt;hypermedia.&lt;/strong&gt; De ambos ya hablamos en secciones previas. Sobre los controles &lt;strong&gt;hypermedia&lt;/strong&gt; y para que quede claro, no son otra cosa que las posibles acciones que se pueden ejercer sobre un recurso; es una forma de comunicarle al cliente &lt;em&gt;“Me pediste este recurso y aquí está, ahh y si necesitas realizar alguna acción sobre ese recurso o recursos estas son las acciones posibles”&lt;/em&gt;. Esta parte la cubrimos con el metadata de la respuesta, específicamente con la sección de &lt;strong&gt;links&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;En teoría siguiendo los consejos descritos con anterioridad hacen que nuestra API sea &lt;strong&gt;HATEOAS&lt;/strong&gt; sin pensar mucho en este resultado.&lt;/p&gt;

&lt;h3 id=&quot;restful&quot;&gt;RESTful&lt;/h3&gt;

&lt;p&gt;Podemos decir con certeza que un API que haga uso apropiado del protocolo de HTTP, que exponga los recursos y acciones a través de &lt;strong&gt;Endpoints&lt;/strong&gt;, que utilice de forma apropiada los verbos de HTTP y que exponga los controles de &lt;strong&gt;hypermedia&lt;/strong&gt; es un API &lt;strong&gt;RESTful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Nuevamente, sin pensar en este objetivo, únicamente con el deseo de que nuestra API sea mejor logramos llegar a aquí.&lt;/p&gt;

&lt;h3 id=&quot;documentación&quot;&gt;Documentación&lt;/h3&gt;

&lt;p&gt;No hay un buen API, aunque técnicamente lo sea, si no existe documentación; pero el llevarla a cabo y mantenerla actualizada puede ser tan complicado como hacer el mismo API.&lt;/p&gt;

&lt;p&gt;Afortunadamente hay herramientas que pueden ayudar con este trabajo. En &lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt; utilizamos API Blueprint que es un markdown especializado para describir APIs. El markdown después es procesado para generar la documentación y generar archivos de esquema de JSON que son utilizados para las pruebas automáticas y así asegurarnos que el API es consistente con la documentación.&lt;/p&gt;

&lt;p&gt;El siguiente es un ejemplo de cómo se escribe la documentación en el markdown de API Blueprint.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### List Users [GET]
Returns a list of users paginated by the cursor.

+ Parameters
    + cursor: `10` (number, optional) - Cursor value to paginate response.

+ Request (application/json)
    + Headers

            Accept: application/vnd.api-test.v1+json

+ Response 200 (application/json)

    + Attributes
        + data (array[User], fixed-type) - Users data.
        + pagination (object, required) - Pagination information.
            + cursors (object, required) - Cursors.
                + after: `10` (number, required) - Cursor for next record to fetch.
                + next_uri: `/users?cursor=5` (string, required) - URI for next page.
        + links (array, fixed-type, required) - Links references.
            + (object)
                + rel: `self` (string, required)
                + uri: `/users` (string, required)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Para más detalles de cómo lo utilizamos en &lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt; ver el post &lt;a href=&quot;/desarrollo/2018/08/02/keep-your-api-in-shape-with-api-blueprint.html&quot; target=&quot;_blank&quot;&gt;Keep your API in shape with API Blueprint&lt;/a&gt;. La documentación de &lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt; se puede consultar &lt;a href=&quot;https://staging.creditar.io/api/documentation&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/creditario-2.png&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Documentación de Creditar.io&quot; srcset=&quot;/assets/img/creditario-2.png 1200w, /assets/img/300-creditario-2.png 300w, /assets/img/768-creditario-2.png 768w, /assets/img/1024-creditario-2.png 1024w, /assets/img/180-creditario-2.png 180w, /assets/img/940-creditario-2.png 940w, /assets/img/320-creditario-2.png 320w, /assets/img/640-creditario-2.png 640w, /assets/img/960-creditario-2.png 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusiones&quot;&gt;Conclusiones&lt;/h2&gt;

&lt;p&gt;Para el equipo de &lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt; es importante que el API funcione y este documentado correctamente, ya que como se mencionó al inicio del post, la idea es que &lt;a href=&quot;http://creditar.io&quot; target=&quot;_blank&quot;&gt;Creditar.io&lt;/a&gt; sea una plataforma que se pueda integrar fácilmente en los procesos de las FinTech que lo utilizan.&lt;/p&gt;

&lt;p&gt;Afortunadamente los conceptos para tener un API REST saludable no son difíciles de implementar pero si requieren de cierta disciplina.&lt;/p&gt;

&lt;p&gt;Espero que los puntos expresados en este post les sirva de ayuda en caso que también estén decidiendo implementar un API y quizás aún no se deciden entre hacerla REST o GraphQL.&lt;/p&gt;</content><author><name>Mario Alberto Chávez</name></author><summary type="html">Lecciones construyendo un API REST</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mariochavez.io/developing.jpg" /><media:content medium="image" url="https://mariochavez.io/developing.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">I created the same app with Rails and Javascript</title><link href="https://mariochavez.io/desarrollo/2019/12/23/i-created-the-same-app-with-rails-and-javascript.html" rel="alternate" type="text/html" title="I created the same app with Rails and Javascript" /><published>2019-12-23T12:00:00-06:00</published><updated>2019-12-23T12:00:00-06:00</updated><id>https://mariochavez.io/desarrollo/2019/12/23/i-created-the-same-app-with-rails-and-javascript</id><content type="html" xml:base="https://mariochavez.io/desarrollo/2019/12/23/i-created-the-same-app-with-rails-and-javascript.html">&lt;h1 id=&quot;i-created-the-same-app-with-rails-and-javascript&quot;&gt;I created the same app with Rails and Javascript&lt;/h1&gt;

&lt;p&gt;A few days ago, I came into a post on Medium “&lt;a href=&quot;https://medium.com/javascript-in-plain-english/i-created-the-exact-same-app-in-react-and-svelte-here-are-the-differences-c0bd2cc9b3f8&quot; target=&quot;_blank&quot;&gt;I created the exact same app in React and Svelte. Here are the differences&lt;/a&gt;”, this post talks about side by side code comparison on writing a simple To Do application with both Javascript Framework.&lt;/p&gt;

&lt;p&gt;Sunil Sandhu, the author of the post, is familiar with React by using it at work, and he wrote the post based on his exploration of Svelte and his experience with React.&lt;/p&gt;

&lt;p&gt;It is an excellently written post with much useful information, so he tackled the work of creating a second post comparing Svelte and Vue “&lt;a href=&quot;https://medium.com/javascript-in-plain-english/i-created-the-exact-same-app-in-vue-and-svelte-here-are-the-differences-c649f8d4ce0a&quot; target=&quot;_blank&quot;&gt;I created the exact same app in Vue and Svelte. Here are the differences&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;While both posts have great information, I have always been vocal about why not try the old good Web foundation before jumping directly into a Javascript framework that takes over the application heart.&lt;/p&gt;

&lt;p&gt;So I decided to use his same approach and wrote this post about using HTML, SASS, and &lt;a href=&quot;https://stimulusjs.org&quot; target=&quot;_blank&quot;&gt;StimulusJs&lt;/a&gt; with a Rails backend.&lt;/p&gt;

&lt;h2 id=&quot;the-rails-project&quot;&gt;The Rails project&lt;/h2&gt;

&lt;p&gt;For this project backend needs, there is no need for all the Rails frameworks. Fortunately, a project can be customized since creating to include what is need it. The &lt;strong&gt;rails&lt;/strong&gt; command gives many options to what includes and what left out.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails --help
$ Usage:
  rails new APP_PATH [options]

Options:
      [--skip-namespace], [--no-skip-namespace]              # Skip namespace (affects only isolated applications)
  -r, [--ruby=PATH]                                          # Path to the Ruby binary of your choice
                                                             # Default: /Users/marioch/.rbenv/versions/2.6.3/bin/ruby
  -m, [--template=TEMPLATE]                                  # Path to some application template (can be a filesystem path or URL)
  -d, [--database=DATABASE]                                  # Preconfigure for selected database (options: mysql/postgresql/sqlite3/oracle/frontbase/ibm_db/sqlserver/jdbcmysql/jdbcsqlite3/jdbcpostgresql/jdbc)
                                                             # Default: sqlite3
      [--skip-gemfile], [--no-skip-gemfile]                  # Don't create a Gemfile
  -G, [--skip-git], [--no-skip-git]                          # Skip .gitignore file
      [--skip-keeps], [--no-skip-keeps]                      # Skip source control .keep files
  -M, [--skip-action-mailer], [--no-skip-action-mailer]      # Skip Action Mailer files
      [--skip-action-mailbox], [--no-skip-action-mailbox]    # Skip Action Mailbox gem
      [--skip-action-text], [--no-skip-action-text]          # Skip Action Text gem
  -O, [--skip-active-record], [--no-skip-active-record]      # Skip Active Record files
      [--skip-active-storage], [--no-skip-active-storage]    # Skip Active Storage files
  -P, [--skip-puma], [--no-skip-puma]                        # Skip Puma related files
  -C, [--skip-action-cable], [--no-skip-action-cable]        # Skip Action Cable files
  -S, [--skip-sprockets], [--no-skip-sprockets]              # Skip Sprockets files
      [--skip-spring], [--no-skip-spring]                    # Don't install Spring application preloader
      [--skip-listen], [--no-skip-listen]                    # Don't generate configuration that depends on the listen gem
  -J, [--skip-javascript], [--no-skip-javascript]            # Skip JavaScript files
      [--skip-turbolinks], [--no-skip-turbolinks]            # Skip turbolinks gem
  -T, [--skip-test], [--no-skip-test]                        # Skip test files
      [--skip-system-test], [--no-skip-system-test]          # Skip system test files
      [--skip-bootsnap], [--no-skip-bootsnap]                # Skip bootsnap gem
      [--dev], [--no-dev]                                    # Setup the application with Gemfile pointing to your Rails checkout
      [--edge], [--no-edge]                                  # Setup the application with Gemfile pointing to Rails repository
      [--rc=RC]                                              # Path to file containing extra configuration options for rails command
      [--no-rc], [--no-no-rc]                                # Skip loading of extra configuration options from .railsrc file
      [--api], [--no-api]                                    # Preconfigure smaller stack for API only apps
  -B, [--skip-bundle], [--no-skip-bundle]                    # Don't run bundle install
  --webpacker, [--webpack=WEBPACK]                           # Preconfigure Webpack with a particular framework (options: react, vue, angular, elm, stimulus)
      [--skip-webpack-install], [--no-skip-webpack-install]  # Don't run Webpack install

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By looking at the command usage information, a decision can be made based on project needs. By running the rails command with the following flags, the bootstrap process is cutting out many dependencies.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails new frontend -M --skip-action-mailbox --skip-action-text --skip-active-storage --skip-action-cable --skip-sprockets --skip-javascript
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://webpack.js.org&quot; target=&quot;_blank&quot;&gt;Webpack&lt;/a&gt; will help in this project to handle assets like SASS, Javascript, and images. To install it, open the &lt;strong&gt;Gemfile&lt;/strong&gt; and add the &lt;a href=&quot;https://github.com/rails/webpacker&quot; target=&quot;_blank&quot;&gt;Webpacker&lt;/a&gt; gem. It is a wrapper for Webpack that helps with Rails integration.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Gemfile

...
gem &quot;webpacker&quot;, &quot;~&amp;gt; 4.0&quot;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run the &lt;strong&gt;bundle&lt;/strong&gt; command and then configure Webpack and install StimulusJs in the project.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle
$ bin/rails webpacker:install
$ bin/rails webpacker:install:stimulus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The project bootstrap is done and ready for you to focus on the functionality of this application.&lt;/p&gt;

&lt;h2 id=&quot;backend-side&quot;&gt;Backend side&lt;/h2&gt;

&lt;p&gt;First, this application needs a &lt;code class=&quot;highlighter-rouge&quot;&gt;Todo&lt;/code&gt; model with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Name&lt;/code&gt; attribute to stored To Dos data. The simple step to create the model is to take advantage of Rails generators for this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rails g model todo name
invoke  active_record
      create    db/migrate/20191219201444_create_todos.rb
      create    app/models/todo.rb
      invoke    test_unit
      create      test/models/todo_test.rb
      create      test/fixtures/todos.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A few files were created along with our model. For now, focus on &lt;strong&gt;db/migrate/20191219201444_create_todos.rb&lt;/strong&gt; file; it is a database migration. Every time a database migration is created, you need to sure that it has database constraints required for a model; in this case, the name can not be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class CreateTodos &amp;lt; ActiveRecord::Migration[6.0]
  def change
    create_table :todos do |t|
      t.string :name, null: false

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With changes in place, it is time to migrate the database.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the Ruby world, it is common to write automated tests, so why not write a few for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Todo&lt;/code&gt; model. Open the test file &lt;strong&gt;test/models/todo_test.rb&lt;/strong&gt; and add the following tests.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require &quot;test_helper&quot;

class TodoTest &amp;lt; ActiveSupport::TestCase
  test &quot;is valid&quot; do
    subject = Todo.new todo_params

    assert subject.valid?
  end

  test &quot;is invalid&quot; do
    subject = Todo.new todo_params(name: &quot;&quot;)

    refute subject.valid?
    refute_empty subject.errors[:name]
  end

  def todo_params(attributes = {})
    {name: &quot;Test todo&quot;}.merge(attributes)
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The tests are simple; they make sure the mode model is valid when all attributes meet requirements and invalid when not. To run the tests execute the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rails test
# Running:

F

Failure:
TodoTest#test_is_invalid [/Users/marioch/Development/personal/frontend/test/models/todo_test.rb:13]:
Expected true to not be truthy.


rails test test/models/todo_test.rb:10

.

Finished in 0.194414s, 10.2873 runs/s, 10.2873 assertions/s.
2 runs, 2 assertions, 1 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The runner reports failed tests; it is expected because the model under test is not validating any attributes requirements. The fix is straightforward, open the file &lt;strong&gt;app/models/todo.rb&lt;/strong&gt; and add the following validations.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Todo &amp;lt; ApplicationRecord
  validates :name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rerun the tests after the change, and now the runner reports that everything is ok.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rails test
# Running:

..

Finished in 0.116393s, 17.1832 runs/s, 34.3663 assertions/s.
2 runs, 4 assertions, 0 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last part of the Backend needs a controller, the &lt;code class=&quot;highlighter-rouge&quot;&gt;TodosController&lt;/code&gt;. This time the controller will be created manually and not with the help of Rails generators, it must have three actions &lt;strong&gt;Index&lt;/strong&gt;, &lt;strong&gt;Create&lt;/strong&gt;, and &lt;strong&gt;Destroy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let us start with the routes of the application, open the file &lt;strong&gt;config/routes.rb&lt;/strong&gt;, and add the following rules for &lt;code class=&quot;highlighter-rouge&quot;&gt;TodosController&lt;/code&gt; actions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rails.application.routes.draw do
  resources :todos, only: [:index, :create, :destroy]

  root to: &quot;todos#index&quot;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since automated tests are being written for this project, test data is required for us to write &lt;code class=&quot;highlighter-rouge&quot;&gt;TodosController&lt;/code&gt; tests. A fixture is just that, test data available in tests only. To add a To Do fixture, open the file &lt;strong&gt;test/fixtures/todos.yml&lt;/strong&gt; and add the following record, simple, right?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todo:
  name: &quot;Fixture todo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now create the file &lt;strong&gt;test/controllers/todos_controller_test.rb&lt;/strong&gt;, this file is used to write tests for &lt;code class=&quot;highlighter-rouge&quot;&gt;TodosController&lt;/code&gt;. It is important to notice that tests for controllers only cares about the input and the response, nothing else.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require &quot;test_helper&quot;

class TodosControllerTest &amp;lt; ActionDispatch::IntegrationTest
  test &quot;GET /todos&quot; do
    get todos_path

    assert_response :success
  end

  test &quot;POST /todos (success)&quot; do
    post todos_path, params: {todo: {name: &quot;Test todo&quot;}}, as: :json

    assert_response :created

    json_response = JSON.parse(response.body, symbolize_names: true)
    assert json_response.dig(:id).present?
    assert json_response.dig(:html).present?
  end

  test &quot;POST /todos (failure)&quot; do
    post todos_path, params: {todo: {name: &quot;&quot;}}, as: :json

    assert_response :unprocessable_entity

    json_response = JSON.parse(response.body, symbolize_names: true)
    assert json_response.dig(:errors, :name).present?
  end

  test &quot;DELETE /todos/:id&quot; do
    todo = todos(:todo)
    delete todo_path(todo), as: :json

    assert_response :no_content
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A run on the tests report all controller tests with an error; it is because the &lt;code class=&quot;highlighter-rouge&quot;&gt;TodosController&lt;/code&gt; does not exist.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rails test
# Running:

E

Error:
TodosControllerTest#test_POST_/todos_(failure):
ActionController::RoutingError: uninitialized constant TodosController
Did you mean?  TodosControllerTest
    test/controllers/todos_controller_test.rb:20:in `block in &amp;lt;class:TodosControllerTest&amp;gt;'


rails test test/controllers/todos_controller_test.rb:19

...

E

Error:
TodosControllerTest#test_GET_/todos:
ActionController::RoutingError: uninitialized constant TodosController
Did you mean?  TodosControllerTest
    test/controllers/todos_controller_test.rb:5:in `block in &amp;lt;class:TodosControllerTest&amp;gt;'
.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is time to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;TodosController&lt;/code&gt;. Create a file &lt;strong&gt;app/controllers/todos_controller.rb&lt;/strong&gt; and add the code for all actions. Notice that Index action responds with HTML, Create with a JSON response, and Destroy with no content.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class TodosController &amp;lt; ApplicationController
  def index
    @todos = Todo.order(created_at: :desc)
    @todo = Todo.new
  end

  def create
    todo = Todo.new(todo_params)

    if todo.save
      todo_html = render_to_string(partial: &quot;todos/todo&quot;, locals: {todo: todo}, formats: [:html])
      return render(json: {id: todo.id, html: todo_html}, status: :created)
    end

    render json: {errors: todo.errors.to_h}, status: :unprocessable_entity
  end

  def destroy
    todo = Todo.find_by(id: params[:id])
    todo.destroy

    render plain: &quot;&quot;, status: :no_content
  end

  private

  def todo_params
    params.require(:todo).permit(:name)
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let us try the tests again; much better, everything is green except for one test. The failing test indicates that Index action could not found an HTML template to render; it is ok for now; this template is added in the next section.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rails test

# Running:

E

Error:
TodosControllerTest#test_GET_/todos:
ActionController::MissingExactTemplate: TodosController#index is missing a template for request formats: text/html
    test/controllers/todos_controller_test.rb:5:in `block in &amp;lt;class:TodosControllerTest&amp;gt;'


rails test test/controllers/todos_controller_test.rb:4

......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-frontend-side&quot;&gt;The Frontend side&lt;/h2&gt;

&lt;p&gt;The project is ready for us to work on the frontend. Since it uses Webpack, it is the right time to start the Webpack server and the Rails server; each one needs to run in its terminal session.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/webpack-dev-server
----
$ bin/rails s -p 3400
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the original &lt;a href=&quot;https://github.com/sunil-sandhu/react-todo-2019&quot; target=&quot;_blank&quot;&gt;React project&lt;/a&gt;, a few assets will be reused. To start, copy the contents of &lt;strong&gt;App.css&lt;/strong&gt;, &lt;strong&gt;components/ToDo.css&lt;/strong&gt;, and &lt;strong&gt;components/ToDoItem.css&lt;/strong&gt; into a single file in our project, this file is &lt;strong&gt;app/javascript/stylesheets/application.scss&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rails-ujs&lt;/strong&gt; library is a Javascript library from Rails that helps in what Rails community calls “Unobtrusive Javascript”, it makes Ajax call made by Rails helpers transparent. To install it, use &lt;strong&gt;Yarn&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/yarn add @rails-ujs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, a new logo for this project must be placed at &lt;strong&gt;app/javascript/images&lt;/strong&gt; and imported along with the &lt;strong&gt;application.scss&lt;/strong&gt; file into the &lt;strong&gt;app/javascript/packs/application.js&lt;/strong&gt; for Webpack to manage those files for us. Here also &lt;strong&gt;rails-ujs&lt;/strong&gt; gets initialized.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require(&quot;@rails/ujs&quot;).start()

import &quot;../stylesheets/application.scss&quot;
import &quot;../images/logo.png&quot;

import &quot;controllers&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For Rails to use the bundle files from Webpack, the Rails application HTML layout needs to be updated to use Webpack’s files. Open the file &lt;strong&gt;app/views/layout/application.html.erb&lt;/strong&gt; and add the Webpack helpers to it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Rails To Do&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;csrf_meta_tags&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;csp_meta_tag&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;javascript_pack_tag&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;stylesheet_pack_tag&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the React components, &lt;strong&gt;ToDoItem.js&lt;/strong&gt; and &lt;strong&gt;ToDo.js&lt;/strong&gt; let us copy the HTML template part into two Rails template &lt;strong&gt;app/views/todos/_todo.html.erb&lt;/strong&gt; and &lt;strong&gt;app/views/todos/index.html.erb&lt;/strong&gt; respectively but with few modifications. First, the React specific code must be replaced with Rails code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;ToDoItem&quot; data-controller=&quot;todo-delete&quot; data-target=&quot;todo-delete.item&quot;&amp;gt;
  &amp;lt;p class=&quot;ToDoItem-Text&quot;&amp;gt;&amp;lt;%= todo.name %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;%= button_to &quot;-&quot;, todo_path(todo.id),
      method: :delete,
      remote: true,
      form: { data: { action: &quot;ajax:success-&amp;gt;todo-delete#successResult ajax:error-&amp;gt;todo-delete#errorResult&quot; } },
      class: &quot;ToDoItem-Delete&quot;
     %&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;StimulusJS will use those attributes to interact and connect with the HTML DOM.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;data-controller&lt;/code&gt; tells StimulusJS, which Javascript component (controller) to activate when that attribute is present in the DOM. &lt;code class=&quot;highlighter-rouge&quot;&gt;data-target&lt;/code&gt; is a way to reference DOM nodes inside the StimulusJS controller, and &lt;code class=&quot;highlighter-rouge&quot;&gt;data-action&lt;/code&gt; is the way to dispatch DOM events to the StimulusJS controller.&lt;/p&gt;

&lt;p&gt;Right now, without a StimulusJS controller, those data attributes are kind of useless, but we are planning for the time when the controllers are in place.&lt;/p&gt;

&lt;p&gt;Now let us do the same for React component &lt;code class=&quot;highlighter-rouge&quot;&gt;ToDo.js&lt;/code&gt;, the HTML template code needs to be copied to &lt;strong&gt;/app/views/todos/index.html.erb&lt;/strong&gt;, here is the modified version of it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;ToDo&quot;&amp;gt;
  &amp;lt;%= image_tag asset_pack_path(&quot;media/images/logo.png&quot;), class: &quot;Logo&quot;, alt: &quot;Rails logo&quot; %&amp;gt;
  &amp;lt;h1 class=&quot;ToDo-Header&quot;&amp;gt;Rails To Do&amp;lt;/h1&amp;gt;
  &amp;lt;div class=&quot;ToDo-Container&quot; data-controller=&quot;todo&quot;&amp;gt;
    &amp;lt;div class=&quot;ToDo-Content&quot; data-target=&quot;todo.todos&quot;&amp;gt;
      &amp;lt;%= render @todos %&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&quot;ToDoInput&quot;&amp;gt;
      &amp;lt;%= form_with model: @todo, local: false,
        data: { action: &quot;ajax:beforeSend-&amp;gt;todo#validateSubmit ajax:error-&amp;gt;todo#errorResult ajax:success-&amp;gt;todo#successResult&quot; } do |form| %&amp;gt;
        &amp;lt;%= form.text_field :name, data: { target: &quot;todo.field&quot; } %&amp;gt;
        &amp;lt;%= form.submit &quot;+&quot;, class: &quot;ToDo-Add&quot; %&amp;gt;
      &amp;lt;% end %&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before we continue, let us make a little detour here. Remember the failing test for &lt;code class=&quot;highlighter-rouge&quot;&gt;TodosController&lt;/code&gt; due to a missing template? The template is now in place, so the test should not be failing anymore, rerun the tests and see it by yourself.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rails test

# Running:

........

Finished in 0.355593s, 22.4976 runs/s, 36.5586 assertions/s.
8 runs, 11 assertions, 0 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is time to add Javascript to the project. Let us start with the controller that helps to delete a To Do item. The file is &lt;strong&gt;app/javascript/controllers/todo_delete_controller.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Controller } from &quot;stimulus&quot;

export default class extends Controller {
  static targets = [&quot;item&quot;]

  errorResult(event) {
    console.log(event.detail)
  }

  successResult(event) {
    event.preventDefault()
    this.itemTarget.remove()
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next controller is the one that takes care of adding new To Do item. The file is &lt;strong&gt;app/javascript/controllers/todo_controller.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Controller } from &quot;stimulus&quot;

export default class extends Controller {
  static targets = [&quot;todos&quot;, &quot;field&quot;]

  errorResult(event) {
    console.log(&quot;error&quot;, event.detail)
  }

  successResult(event) {
    const response = event.detail[0]
    const todoHTML = document.createRange().createContextualFragment(response.html)

    this.todosTarget.prepend(todoHTML)
    this.fieldTarget.value = &quot;&quot;
  }

  validateSubmit(event) {
    if (this.fieldTarget.value === &quot;&quot;) {
      event.preventDefault()
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It has two functions, &lt;code class=&quot;highlighter-rouge&quot;&gt;validatesSubmit&lt;/code&gt;, which is called on form submit, and validates the input to now allow empty To Do. The second one, &lt;code class=&quot;highlighter-rouge&quot;&gt;successResult&lt;/code&gt; is called after the Ajax request is made, and it takes care to place the To Do HTML fragment in the DOM. The HTML To Do fragment is part of the server response.&lt;/p&gt;

&lt;p&gt;The project is done. If you want to try it out, add a couple of seed records into &lt;strong&gt;db/seeds.rb&lt;/strong&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Todo.create(name: &quot;clean the house&quot;)
Todo.create(name: &quot;buy milk&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And seed the database with the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now point your browser to &lt;a href=&quot;http://localhost:3400/&quot; target=&quot;_blank&quot;&gt;http://localhost:3400&lt;/a&gt; and try the application.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/rails-todo.png&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Rails To Do&quot; srcset=&quot;/assets/img/rails-todo.png 1200w, /assets/img/300-rails-todo.png 300w, /assets/img/768-rails-todo.png 768w, /assets/img/1024-rails-todo.png 1024w, /assets/img/180-rails-todo.png 180w, /assets/img/940-rails-todo.png 940w, /assets/img/320-rails-todo.png 320w, /assets/img/640-rails-todo.png 640w, /assets/img/960-rails-todo.png 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The application is similar in terms of UI interaction, but in addition, it has a Backend that is not present in the original React application. It also has automated tests for models and controllers, and we can do a little better by adding a System Test. This kind of test automates the browser to “use” the application in specific scenarios.&lt;/p&gt;

&lt;p&gt;To add a System test, create the file &lt;strong&gt;test/system/todos_test.rb&lt;/strong&gt; and add the following content.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require &quot;application_system_test_case&quot;

class TodosTest &amp;lt; ApplicationSystemTestCase
  test &quot;visit todos&quot; do
    todos_count = Todo.count
    visit root_url

    assert_selector &quot;h1&quot;, text: &quot;Rails To Do&quot;.upcase
    assert_selector &quot;.ToDoItem&quot;, count: todos_count
  end

  test &quot;try to add an empty todo&quot; do
    todos_count = Todo.count
    visit root_url

    fill_in &quot;todo_name&quot;, with: &quot;&quot;
    click_button &quot;+&quot;

    assert_selector &quot;.ToDoItem&quot;, count: todos_count
  end

  test &quot;add a todo&quot; do
    todo = &quot;Add Tests&quot;
    todos_count = Todo.count
    visit root_url

    fill_in &quot;todo_name&quot;, with: todo
    click_button &quot;+&quot;

    assert_selector &quot;.ToDoItem&quot;, count: todos_count + 1
    assert_selector &quot;.ToDoItem&quot;, text: todo
  end

  test &quot;delete a todo&quot; do
    todo = todos(:todo)
    todos_count = Todo.count

    visit root_url
    todo_element = page.find &quot;.ToDoItem&quot;, text: todo.name
    remove_button = todo_element.find &quot;.ToDoItem-Delete&quot;
    remove_button.click

    assert_selector &quot;.ToDoItem&quot;, count: todos_count - 1
    refute_selector &quot;.ToDoItem&quot;, text: todo.name
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To run the System test, you need to have the Chrome browser installed. Run the test using the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rails test:system

# Running:

Capybara starting Puma...
* Version 4.3.1 , codename: Mysterious Traveller
* Min threads: 0, max threads: 4
* Listening on tcp://127.0.0.1:51968
Capybara starting Puma...
* Version 4.3.1 , codename: Mysterious Traveller
* Min threads: 0, max threads: 4
* Listening on tcp://127.0.0.1:51971
....

Finished in 5.133107s, 0.7793 runs/s, 1.3637 assertions/s.
4 runs, 7 assertions, 0 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;final-words&quot;&gt;Final words&lt;/h2&gt;

&lt;p&gt;What I would like you to take from replicating this example is that sometimes there is no need to go all the way in with a separated frontend like React, Vue, or Svelte.&lt;/p&gt;

&lt;p&gt;By using the HTML standard, the maturity of your framework, and a tool like StimulusJS you can archive the same “snappy” functionality without the mess of Javascript code from the time before frameworks.&lt;/p&gt;

&lt;p&gt;Both libraries, rails-ujs and StimulusJS were developed within the Rails community, but the truth is that they do not depend on Rails, both can be used with any other backend/HTML template system.&lt;/p&gt;

&lt;p&gt;You can find the sample code at &lt;a href=&quot;https://github.com/mariochavez/rails-todo-2019&quot; target=&quot;_blank&quot;&gt;https://github.com/mariochavez/rails-todo-2019&lt;/a&gt;&lt;/p&gt;</content><author><name>Mario Alberto Chávez</name></author><summary type="html">I created the same app with Rails and Javascript</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mariochavez.io/vim.png" /><media:content medium="image" url="https://mariochavez.io/vim.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Impresión del Nevado de Colima</title><link href="https://mariochavez.io/fotograf%C3%ADa/2019/08/14/impresion-nevado-de-colima.html" rel="alternate" type="text/html" title="Impresión del Nevado de Colima" /><published>2019-08-14T07:00:00-05:00</published><updated>2019-08-14T07:00:00-05:00</updated><id>https://mariochavez.io/fotograf%C3%ADa/2019/08/14/impresion-nevado-de-colima</id><content type="html" xml:base="https://mariochavez.io/fotograf%C3%ADa/2019/08/14/impresion-nevado-de-colima.html">&lt;p&gt;Ayer durante la tarde y parte de la noche tuve la oportunidad de intentar hacer algunas impresiones ópticas en 
plata gelatina, realmente no iba con la intención de imprimir una fotografía en particular más allá de tener la
oportunidad de probar los filtros de contraste multigrado de Ilford.&lt;/p&gt;

&lt;p&gt;Había leído un poco sobre ellos, en particular me llamó la atención que hacer cosas como “dodge and burning” era
más simple eligiendo la combinación de filtros correcta. Inclusive &lt;a href=&quot;https://www.ilfordphoto.com/split-grade-printing/&quot; target=&quot;_blank&quot;&gt;Ilford recomienda&lt;/a&gt; utilizar 2 filtros para la impresión; un filtro de bajo contraste y otro de alto contraste.&lt;/p&gt;

&lt;p&gt;Comencé la impresión haciendo una prueba de escalas con el filtro 2.5 utilizando una separación de 2 segundos de exposición pero al
poner el papel en el revelador la prueba falló totalmente. La apertura de la ampliadora fue f/8.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/impresion-nevado-colima-1.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/impresion-nevado-colima-1.jpg 1200w, /assets/img/300-impresion-nevado-colima-1.jpg 300w, /assets/img/768-impresion-nevado-colima-1.jpg 768w, /assets/img/1024-impresion-nevado-colima-1.jpg 1024w, /assets/img/180-impresion-nevado-colima-1.jpg 180w, /assets/img/940-impresion-nevado-colima-1.jpg 940w, /assets/img/320-impresion-nevado-colima-1.jpg 320w, /assets/img/640-impresion-nevado-colima-1.jpg 640w, /assets/img/960-impresion-nevado-colima-1.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
  &lt;p&gt;Fotografía en blanco, el tiempo máximo de exposición no fue suficiente.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;En la segunda prueba la escala de exposición fue de 5 segundos y aún así la franja que recibió más tiempos apenas si mostró algo de la imagen 
ya una vez dentro del revelador. Además de cambiar el tiempo de exposición también se modificó la apertura de la ampliadora a f/5.6.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/impresion-nevado-colima-2.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/impresion-nevado-colima-2.jpg 1200w, /assets/img/300-impresion-nevado-colima-2.jpg 300w, /assets/img/768-impresion-nevado-colima-2.jpg 768w, /assets/img/1024-impresion-nevado-colima-2.jpg 1024w, /assets/img/180-impresion-nevado-colima-2.jpg 180w, /assets/img/940-impresion-nevado-colima-2.jpg 940w, /assets/img/320-impresion-nevado-colima-2.jpg 320w, /assets/img/640-impresion-nevado-colima-2.jpg 640w, /assets/img/960-impresion-nevado-colima-2.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
  &lt;p&gt;Se incrementó el tiempo de exposición en la escala pero aún así no fue suficiente.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Después de los 2 intentos fallidos con los filtros Ilford, la siguiente prueba fue sin filtros con una apertura de f/5.6 y un tiempo de 12 segundos. Finalmente
tenía una imagen pero no la prueba que deseaba realizar con los filtros para manejar el contraste de la imagen que como se puede ver abajo prácticamente
carece de él.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/impresion-nevado-colima-3.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/impresion-nevado-colima-3.jpg 1200w, /assets/img/300-impresion-nevado-colima-3.jpg 300w, /assets/img/768-impresion-nevado-colima-3.jpg 768w, /assets/img/1024-impresion-nevado-colima-3.jpg 1024w, /assets/img/180-impresion-nevado-colima-3.jpg 180w, /assets/img/940-impresion-nevado-colima-3.jpg 940w, /assets/img/320-impresion-nevado-colima-3.jpg 320w, /assets/img/640-impresion-nevado-colima-3.jpg 640w, /assets/img/960-impresion-nevado-colima-3.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
  &lt;p&gt;Impresión en plata gelatina del Volcán Nevado de Colima. Sin filtros.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;La siguiente prueba fue un poco más agresiva, tomando el tiempo base de la impresión anterior casi se duplicó para llegar a 30 segundos con el filtro 1 y se agregaron 5 segundos más con el filtro 4. La imagen resultante fue con más contraste pero algo tenue en general.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/impresion-nevado-colima-4.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/impresion-nevado-colima-4.jpg 1200w, /assets/img/300-impresion-nevado-colima-4.jpg 300w, /assets/img/768-impresion-nevado-colima-4.jpg 768w, /assets/img/1024-impresion-nevado-colima-4.jpg 1024w, /assets/img/180-impresion-nevado-colima-4.jpg 180w, /assets/img/940-impresion-nevado-colima-4.jpg 940w, /assets/img/320-impresion-nevado-colima-4.jpg 320w, /assets/img/640-impresion-nevado-colima-4.jpg 640w, /assets/img/960-impresion-nevado-colima-4.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
  &lt;p&gt;Impresión en plata gelatina del Volcán Nevado de Colima. Con filtros 1 y 4.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;La combinación de filtros parecía la correcta aunque los tiempos no tanto. Se realizó una impresión más pero en esta ocasión los tiempos fueron 40 segundos y 20 segundos respectivamente para los filtros 1 y 4.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/impresion-nevado-colima-5.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/impresion-nevado-colima-5.jpg 1200w, /assets/img/300-impresion-nevado-colima-5.jpg 300w, /assets/img/768-impresion-nevado-colima-5.jpg 768w, /assets/img/1024-impresion-nevado-colima-5.jpg 1024w, /assets/img/180-impresion-nevado-colima-5.jpg 180w, /assets/img/940-impresion-nevado-colima-5.jpg 940w, /assets/img/320-impresion-nevado-colima-5.jpg 320w, /assets/img/640-impresion-nevado-colima-5.jpg 640w, /assets/img/960-impresion-nevado-colima-5.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
  &lt;p&gt;Impresión en plata gelatina del Volcán Nevado de Colima. Con filtros 1 y 4 más tiempo.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Mucho mejor la imagen, bastante contraste en el bosque en la base del volcán y en las sombra de las laderas, pero en la esquina superior izquierda el cielo se
desvaneció a blanco. La última iteración de la noche fue cambiar el filtro 1 a uno 0 con menor contraste, mantener el filtro 4 su subir el tiempo a 60 segundos y 30 segundos para cada filtro respectivamente.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/impresion-nevado-colima-6.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/impresion-nevado-colima-6.jpg 1200w, /assets/img/300-impresion-nevado-colima-6.jpg 300w, /assets/img/768-impresion-nevado-colima-6.jpg 768w, /assets/img/1024-impresion-nevado-colima-6.jpg 1024w, /assets/img/180-impresion-nevado-colima-6.jpg 180w, /assets/img/940-impresion-nevado-colima-6.jpg 940w, /assets/img/320-impresion-nevado-colima-6.jpg 320w, /assets/img/640-impresion-nevado-colima-6.jpg 640w, /assets/img/960-impresion-nevado-colima-6.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
  &lt;p&gt;Impresión en plata gelatina del Volcán Nevado de Colima. Con filtros 0 y 4 imagen final.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;El cielo se recuperó y la base del volcán se ve más intensa, más contrastada. Físicamente en el papel plata gelatina se ve un detalle intenso, de momento quedé
satisfecho con el resultado logrado y el manejo del contraste utilizando únicamente los filtros con este “photoshop” manual, mecánico y óptico.&lt;/p&gt;

&lt;p&gt;La fotografía es de una visita al Parque Nacional del Nevado de Colima, fue tomada aproximadamente a las 10am con una cámara Canon AE-1 y un telefoto 70-300
sobre película Ilford HP+ 400.&lt;/p&gt;

&lt;p&gt;En esta misma sesión se imprimió una fotografía del fotógrafo Gustavo Vilchis, de la cuál no tengo los derechos para reproducir, dónde hicimos una prueba sin filtros y un par más utilizando únicamente el filtro 0 de contraste. La diferencia de las imágenes fue visible instantaneamente, las que se imprimieron con el filtro aparecieron con un contraste dramático que complementaba perfectamente la acción de protesta de campesinos contra la Policía Federal.&lt;/p&gt;

&lt;p&gt;Definitivamente creo que vale la pena la inversión en los filtros si es que se imprime de manera óptica, es una forma muy simple de manejar el contraste general de las fotografías unicamente trabajando con los tiempos y la combinación de los filtros.&lt;/p&gt;</content><author><name>Mario Alberto Chávez</name></author><summary type="html">Ayer durante la tarde y parte de la noche tuve la oportunidad de intentar hacer algunas impresiones ópticas en plata gelatina, realmente no iba con la intención de imprimir una fotografía en particular más allá de tener la oportunidad de probar los filtros de contraste multigrado de Ilford.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mariochavez.io/impresion-nevado-colima-6.jpg" /><media:content medium="image" url="https://mariochavez.io/impresion-nevado-colima-6.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Marcha de organizaciones campesinas</title><link href="https://mariochavez.io/fotograf%C3%ADa/2019/08/09/marcha-organizaciones-campesinas.html" rel="alternate" type="text/html" title="Marcha de organizaciones campesinas" /><published>2019-08-09T07:00:00-05:00</published><updated>2019-08-09T07:00:00-05:00</updated><id>https://mariochavez.io/fotograf%C3%ADa/2019/08/09/marcha-organizaciones-campesinas</id><content type="html" xml:base="https://mariochavez.io/fotograf%C3%ADa/2019/08/09/marcha-organizaciones-campesinas.html">&lt;p&gt;El día de ayer 8 de agosto se llevó a cabo una marcha de organizaciones campesinas en la Ciudad de México. Llegó gente de diferentes estados del país como Guanajuato, Estado de México, Puebla, Veracruz, Chiapas, Oaxaca, Michoacán, entre otros.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/marcha-campesina-7.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/marcha-campesina-7.jpg 1200w, /assets/img/300-marcha-campesina-7.jpg 300w, /assets/img/768-marcha-campesina-7.jpg 768w, /assets/img/1024-marcha-campesina-7.jpg 1024w, /assets/img/180-marcha-campesina-7.jpg 180w, /assets/img/940-marcha-campesina-7.jpg 940w, /assets/img/320-marcha-campesina-7.jpg 320w, /assets/img/640-marcha-campesina-7.jpg 640w, /assets/img/960-marcha-campesina-7.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Los contingentes de campesinos cerca de las 10am se comenzaron a organizar sobre Paseo de la Reforma entorno al Ángel de la Independencia. Ese día amaneció soleado en la capital del país y el calor a esa hora se empezaba a sentir fuerte entre los ahí presentes.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/marcha-campesina-3.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/marcha-campesina-3.jpg 1200w, /assets/img/300-marcha-campesina-3.jpg 300w, /assets/img/768-marcha-campesina-3.jpg 768w, /assets/img/1024-marcha-campesina-3.jpg 1024w, /assets/img/180-marcha-campesina-3.jpg 180w, /assets/img/940-marcha-campesina-3.jpg 940w, /assets/img/320-marcha-campesina-3.jpg 320w, /assets/img/640-marcha-campesina-3.jpg 640w, /assets/img/960-marcha-campesina-3.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Ante la afluencia de estos grupos los pocos turistas que se acercaban al Ángel para la foto simplemente la tomaban de “lejitos”. Los vendedores ambulantes se hicieron presentes tratando de vender todo lo posible a los manifestantes, siendo agua y comida lo más socorrido de quienes no traían “lonche”.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/marcha-campesina-10.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/marcha-campesina-10.jpg 1200w, /assets/img/300-marcha-campesina-10.jpg 300w, /assets/img/768-marcha-campesina-10.jpg 768w, /assets/img/1024-marcha-campesina-10.jpg 1024w, /assets/img/180-marcha-campesina-10.jpg 180w, /assets/img/940-marcha-campesina-10.jpg 940w, /assets/img/320-marcha-campesina-10.jpg 320w, /assets/img/640-marcha-campesina-10.jpg 640w, /assets/img/960-marcha-campesina-10.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Todos los manifestantes llegaron ese mismo día, unas horas antes, a la capital respondiendo al llamado de manifestarse precisamente en la conmemoración del natalicio de Emiliano Zapata, el caudillo del sur e imagen de la lucha por los derechos de los campesinos.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/marcha-campesina-12.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/marcha-campesina-12.jpg 1200w, /assets/img/300-marcha-campesina-12.jpg 300w, /assets/img/768-marcha-campesina-12.jpg 768w, /assets/img/1024-marcha-campesina-12.jpg 1024w, /assets/img/180-marcha-campesina-12.jpg 180w, /assets/img/940-marcha-campesina-12.jpg 940w, /assets/img/320-marcha-campesina-12.jpg 320w, /assets/img/640-marcha-campesina-12.jpg 640w, /assets/img/960-marcha-campesina-12.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Cuando finalmente los contingentes se lograron organizar inició la marcha en dirección a la glorieta del “Caballito” para después entrar a la plaza del monumento a la revolución, donde un templete esperaba a los “líderes”.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/marcha-campesina-13.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/marcha-campesina-13.jpg 1200w, /assets/img/300-marcha-campesina-13.jpg 300w, /assets/img/768-marcha-campesina-13.jpg 768w, /assets/img/1024-marcha-campesina-13.jpg 1024w, /assets/img/180-marcha-campesina-13.jpg 180w, /assets/img/940-marcha-campesina-13.jpg 940w, /assets/img/320-marcha-campesina-13.jpg 320w, /assets/img/640-marcha-campesina-13.jpg 640w, /assets/img/960-marcha-campesina-13.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;De los diversos grupos que se estaban manifestando hubo algo en común que me llamó la atención. Si bien en términos generales pedían que el Gobierno Federal cumpliera con lo ofrecido en tiempos de campaña y que hasta este momento el presidente Obrador no había cumplido, una buena cantidad de las mantas portadas solicitaban algo más que eso.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/marcha-campesina-14.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/marcha-campesina-14.jpg 1200w, /assets/img/300-marcha-campesina-14.jpg 300w, /assets/img/768-marcha-campesina-14.jpg 768w, /assets/img/1024-marcha-campesina-14.jpg 1024w, /assets/img/180-marcha-campesina-14.jpg 180w, /assets/img/940-marcha-campesina-14.jpg 940w, /assets/img/320-marcha-campesina-14.jpg 320w, /assets/img/640-marcha-campesina-14.jpg 640w, /assets/img/960-marcha-campesina-14.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;En muchos de los casos era un llamado de auxilio ante la violencia en sus territorios, ya sea por cuestiones de narcotráfico, grupos paramilitares o el acoso y represión de grande empresas que en todos los casos resultaba en violencia y miedo para hacerlos dejar sus tierras.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/marcha-campesina-15.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/marcha-campesina-15.jpg 1200w, /assets/img/300-marcha-campesina-15.jpg 300w, /assets/img/768-marcha-campesina-15.jpg 768w, /assets/img/1024-marcha-campesina-15.jpg 1024w, /assets/img/180-marcha-campesina-15.jpg 180w, /assets/img/940-marcha-campesina-15.jpg 940w, /assets/img/320-marcha-campesina-15.jpg 320w, /assets/img/640-marcha-campesina-15.jpg 640w, /assets/img/960-marcha-campesina-15.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;En diversos grupos portaban mantas con retratos y nombres de líderes, familiares y amigos que habían sido desaparecidos o asesinados para los cuales clamaban justicia. También pedían la ayuda para poder regresar a sus lugares de origen, ya que algunos de los grupos desplazados fueron forzados a salir hace más de 6 años.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/marcha-campesina-16.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/marcha-campesina-16.jpg 1200w, /assets/img/300-marcha-campesina-16.jpg 300w, /assets/img/768-marcha-campesina-16.jpg 768w, /assets/img/1024-marcha-campesina-16.jpg 1024w, /assets/img/180-marcha-campesina-16.jpg 180w, /assets/img/940-marcha-campesina-16.jpg 940w, /assets/img/320-marcha-campesina-16.jpg 320w, /assets/img/640-marcha-campesina-16.jpg 640w, /assets/img/960-marcha-campesina-16.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;La marcha continuó sin complicaciones, los grupos uno a uno fueron llegando al monumento de la revolución, los oradores comenzaron a hacer lo suyo, todos los presentes buscábamos como cubrirnos del sol que ya para las 2pm golpeaba como plomo, algunos utilizan las banderas o pancartas para cubrirse, los que llegaron primero alcanzaron la sombra de los escasos árboles del área.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/marcha-campesina-17.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/marcha-campesina-17.jpg 1200w, /assets/img/300-marcha-campesina-17.jpg 300w, /assets/img/768-marcha-campesina-17.jpg 768w, /assets/img/1024-marcha-campesina-17.jpg 1024w, /assets/img/180-marcha-campesina-17.jpg 180w, /assets/img/940-marcha-campesina-17.jpg 940w, /assets/img/320-marcha-campesina-17.jpg 320w, /assets/img/640-marcha-campesina-17.jpg 640w, /assets/img/960-marcha-campesina-17.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;El caos del tráfico era inminente en Av. Insurgentes y en las calles del centro, algunos capitalinos preguntaban de qué era la marcha, otros enojados de que esa gente de fuera llegara a complicarles el días.&lt;/p&gt;
&lt;div class=&quot;blog-media&quot;&gt;
  &lt;img width=&quot;1200&quot; height=&quot;800&quot; src=&quot;/assets/img/marcha-campesina-18.jpg&quot; class=&quot;attachment-orio-thumb-big size-orio-thumb-big wp-post-image&quot; alt=&quot;Main image&quot; srcset=&quot;/assets/img/marcha-campesina-18.jpg 1200w, /assets/img/300-marcha-campesina-18.jpg 300w, /assets/img/768-marcha-campesina-18.jpg 768w, /assets/img/1024-marcha-campesina-18.jpg 1024w, /assets/img/180-marcha-campesina-18.jpg 180w, /assets/img/940-marcha-campesina-18.jpg 940w, /assets/img/320-marcha-campesina-18.jpg 320w, /assets/img/640-marcha-campesina-18.jpg 640w, /assets/img/960-marcha-campesina-18.jpg 960w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; /&gt;
&lt;/div&gt;</content><author><name>Mario Alberto Chávez</name></author><summary type="html">El día de ayer 8 de agosto se llevó a cabo una marcha de organizaciones campesinas en la Ciudad de México. Llegó gente de diferentes estados del país como Guanajuato, Estado de México, Puebla, Veracruz, Chiapas, Oaxaca, Michoacán, entre otros.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mariochavez.io/marcha-campesina-1.jpg" /><media:content medium="image" url="https://mariochavez.io/marcha-campesina-1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Serie: Rails para desarrolladores expertos</title><link href="https://mariochavez.io/proyectos/2019/06/02/rails-para-desarrolladores-expertos.html" rel="alternate" type="text/html" title="Serie: Rails para desarrolladores expertos" /><published>2019-06-02T13:00:00-05:00</published><updated>2019-06-02T13:00:00-05:00</updated><id>https://mariochavez.io/proyectos/2019/06/02/rails-para-desarrolladores-expertos</id><content type="html" xml:base="https://mariochavez.io/proyectos/2019/06/02/rails-para-desarrolladores-expertos.html">&lt;p&gt;Esta serie de videos son acerca de Ruby on Rails y la intención es mostrar la funcionalidad que nos proporciona el framework. Algunos videos serán bastante básicos y otros no tanto pero el objetivo en todo caso es demostrar como hacer uso de ciertas características que damos por sentadas y al mismo tiempo tratar temas que los más nuevos en la herramienta quizás desconozcan.&lt;/p&gt;

&lt;p&gt;Todos los videos están basados en Ruby on Rails 6.0 aunque muchos de los temas aplican de forma similar a versiónes anteriores. Los videos se publican una vez a la semana en jueves.&lt;/p&gt;

&lt;p&gt;La lista de los videos disponibles es la siguiente y la estaré actualizando cada semana&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/RPE-logging&quot; target=&quot;_blank&quot;&gt;Logging en Rails&lt;/a&gt;: Por qué es el importate el logging?, Cómo lo podemos utilizar?&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/RPE-validaciones&quot; target=&quot;_blank&quot;&gt;Validaciones&lt;/a&gt;: Cómo usar las validaciones de lado de cliente?, Es posible configurar cómo se muestran desde Rails?&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/RPE-validaciones-stimulus&quot; target=&quot;_blank&quot;&gt;Validaciones con Stimulus&lt;/a&gt;: Aprovechando Stimulus para realizar validaciones en línea de formularios&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/RPE-internacionalizacion&quot; target=&quot;_blank&quot;&gt;Internacionalización i18n&lt;/a&gt;: Internacionalización de aplicaciones con i18n y Rails.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mario Alberto Chávez</name></author><summary type="html">Esta serie de videos son acerca de Ruby on Rails y la intención es mostrar la funcionalidad que nos proporciona el framework. Algunos videos serán bastante básicos y otros no tanto pero el objetivo en todo caso es demostrar como hacer uso de ciertas características que damos por sentadas y al mismo tiempo tratar temas que los más nuevos en la herramienta quizás desconozcan.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mariochavez.io/rails-para-desarrolladores-expertos.png" /><media:content medium="image" url="https://mariochavez.io/rails-para-desarrolladores-expertos.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>